
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 06 11:16:51 BST 2019
//----------------------------------------------------

package uk.ac.ncl.safecap.cteparser;

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 06 11:16:51 BST 2019
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\007\004\000\002\002\004\000\002\007" +
    "\004\000\002\007\003\000\002\006\003\000\002\006\004" +
    "\000\002\005\006\000\002\005\005\000\002\005\003\000" +
    "\002\010\003\000\002\010\004\000\002\011\005\000\002" +
    "\011\005\000\002\011\003\000\002\003\003\000\002\003" +
    "\004\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\003\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\016\004\007\006\011\010\004\013\014\014" +
    "\013\015\015\001\002\000\012\004\007\006\011\010\004" +
    "\015\015\001\002\000\022\002\ufff3\004\ufff3\005\ufff3\006" +
    "\ufff3\007\ufff3\010\ufff3\011\ufff3\015\ufff3\001\002\000\022" +
    "\002\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011" +
    "\uffee\015\uffee\001\002\000\012\004\007\006\011\010\004" +
    "\015\015\001\002\000\014\002\ufffe\004\007\006\011\010" +
    "\004\015\015\001\002\000\012\004\007\006\011\010\004" +
    "\015\015\001\002\000\004\002\042\001\002\000\010\004" +
    "\032\006\034\015\015\001\002\000\006\004\020\015\015" +
    "\001\002\000\022\002\uffed\004\uffed\005\uffed\006\uffed\007" +
    "\uffed\010\uffed\011\uffed\015\uffed\001\002\000\010\002\001" +
    "\004\020\015\015\001\002\000\014\002\ufff9\004\ufff9\005" +
    "\ufff9\010\025\015\ufff9\001\002\000\006\004\020\015\015" +
    "\001\002\000\012\002\ufffd\004\ufffd\005\ufffd\015\ufffd\001" +
    "\002\000\010\004\020\005\024\015\015\001\002\000\012" +
    "\002\ufffc\004\ufffc\005\ufffc\015\ufffc\001\002\000\012\002" +
    "\ufffa\004\ufffa\005\ufffa\015\ufffa\001\002\000\004\015\015" +
    "\001\002\000\004\011\027\001\002\000\012\002\ufffb\004" +
    "\ufffb\005\ufffb\015\ufffb\001\002\000\012\002\uffff\004\032" +
    "\006\034\015\015\001\002\000\014\002\ufff4\004\ufff4\005" +
    "\ufff4\006\ufff4\015\ufff4\001\002\000\010\004\032\006\034" +
    "\015\015\001\002\000\014\002\ufff8\004\ufff8\005\ufff8\006" +
    "\ufff8\015\ufff8\001\002\000\004\015\015\001\002\000\004" +
    "\007\036\001\002\000\014\002\ufff6\004\ufff6\005\ufff6\006" +
    "\ufff6\015\ufff6\001\002\000\012\004\032\005\041\006\034" +
    "\015\015\001\002\000\014\002\ufff7\004\ufff7\005\ufff7\006" +
    "\ufff7\015\ufff7\001\002\000\014\002\ufff5\004\ufff5\005\ufff5" +
    "\006\ufff5\015\ufff5\001\002\000\004\002\000\001\002\000" +
    "\014\004\007\006\011\007\044\010\004\015\015\001\002" +
    "\000\022\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\015\ufff0\001\002\000\022\002\ufff2\004\ufff2" +
    "\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\015\ufff2\001" +
    "\002\000\014\004\007\005\047\006\011\010\004\015\015" +
    "\001\002\000\022\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007" +
    "\ufff1\010\ufff1\011\ufff1\015\ufff1\001\002\000\014\004\007" +
    "\006\011\010\004\011\051\015\015\001\002\000\022\002" +
    "\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef" +
    "\015\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\012\002\004\003\007\004\005\007\011\001" +
    "\001\000\010\002\004\003\047\004\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\004\003\045\004" +
    "\005\001\001\000\006\002\044\004\005\001\001\000\010" +
    "\002\004\003\042\004\005\001\001\000\002\001\001\000" +
    "\010\004\030\010\027\011\032\001\001\000\010\004\016" +
    "\005\020\006\015\001\001\000\002\001\001\000\006\004" +
    "\016\005\022\001\001\000\002\001\001\000\010\004\016" +
    "\005\020\006\021\001\001\000\002\001\001\000\006\004" +
    "\016\005\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\030\011\037\001\001\000\002\001\001" +
    "\000\010\004\030\010\036\011\032\001\001\000\002\001" +
    "\001\000\004\004\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\030\011\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\044" +
    "\004\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\044\004\005\001\001\000\002\001\001\000\006" +
    "\002\044\004\005\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	private Scanner scanner;

	public TEContext context = new TEContext();

	public Parser(java_cup.runtime.Scanner s, 
			ComplexSymbolFactory sf,
			TEContext context) {
			    super(s,sf);
			    this.context = context;
			}

	
	public static syntree parse(java.io.InputStream inputstream, TEContext context) throws Exception
	{
		ExtComplexSymbolFactory sf = new ExtComplexSymbolFactory();
		Scanner scanner = new Scanner(inputstream, sf);
		java_cup.runtime.Symbol s = new Parser(scanner, sf, context).parse();
		if (s == null || !(s.value instanceof syntree))
		    return null;
		else {
		    return (syntree) s.value;
		}
	}
	

	public void report_error(String message, Object info) {
	    ErrInfo einfo = new ErrInfo(0, 0, message);
	    context.addError(einfo);
	    einfo.raw = info;

    	if (info instanceof ComplexSymbolFactory.ComplexSymbol) {
			ComplexSymbolFactory.ComplexSymbol s = ((ComplexSymbolFactory.ComplexSymbol) info);
			einfo.symbol = s;
			if (s != null && s.getRight() != null && s.getLeft() != null) {
				ComplexSymbolFactory.Location loc_abs = s.getLeft();
				ComplexSymbolFactory.Location loc_line = s.getRight();
	       	    einfo.start = loc_abs.getLine();    
	       	    einfo.end = loc_abs.getColumn();    
	       	    einfo.line = loc_line.getLine();    
	       	    einfo.column = loc_line.getColumn();    
	        }
	    }
	} 

  public void report_fatal_error(String message, Object info) {
      report_error(message, info);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // token ::= TOKEN 
            {
              syntree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(ctesym.TOKEN, new synvalue(t)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("token",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // part ::= token 
            {
              syntree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree t = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("part",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // part ::= LSQB list RSQB 
            {
              syntree RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree p = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("part",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // part ::= LCUR list RCUR 
            {
              syntree RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree p = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("part",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // part ::= LPAR list RPAR 
            {
              syntree RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree p = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("part",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // list ::= list part 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree p = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l.add(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // list ::= part 
            {
              syntree RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree p = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(ctesym.LIST, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // pro_part ::= token 
            {
              syntree RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree k = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = k; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pro_part",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // pro_part ::= LPAR pro_list RPAR 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pro_part",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // pro_part ::= LCUR token RCUR 
            {
              syntree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree t = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new syntree(ctesym.BIN, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pro_part",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // pro_list ::= pro_list pro_part 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree p = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l.add(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pro_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // pro_list ::= pro_part 
            {
              syntree RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree p = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(ctesym.LIST, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pro_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // rwr_part ::= token 
            {
              syntree RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree k = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = k; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rwr_part",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // rwr_part ::= LPAR rwr_list RPAR 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rwr_part",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // rwr_part ::= token LSQB token RSQB 
            {
              syntree RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		syntree k = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree t = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = t.add(k); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rwr_part",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // rwr_list ::= rwr_list rwr_part 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree p = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l.add(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rwr_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // rwr_list ::= rwr_part 
            {
              syntree RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree p = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(ctesym.LIST, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rwr_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // top ::= list 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("top",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // top ::= MAGIC2 pro_list 
            {
              syntree RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("top",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= top EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree start_val = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // top ::= MAGIC1 rwr_list 
            {
              syntree RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("top",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

