package uk.ac.ncl.safecap.xtype;

import java_cup.runtime.*;
import java.util.*;

parser code {:
	private Scanner scanner;

	public List<ErrInfo> errorInfo = new ArrayList<ErrInfo>(0);

	public Parser(	java_cup.runtime.Scanner s, 
			ComplexSymbolFactory sf,
			List<ErrInfo> errorInfo) {
			    super(s,sf);
			    this.errorInfo = errorInfo;
			}

	public static void main(String[] args) {
		try {
		    if (args.length > 0) {
			List<ErrInfo> errors = new ArrayList<ErrInfo>(0);
			xtypesyn s = parse(new java.io.FileInputStream(args[0]), errors);
			System.out.println("errors: " + errors);
			System.out.println("result: " + s);
		    }
		} catch (Throwable e) {
		    e.printStackTrace();
		}
	}
	
	public static xtypesyn parse(java.io.InputStream inputstream, List<ErrInfo> errorInfo) throws Exception
	{
		ExtComplexSymbolFactory sf = new ExtComplexSymbolFactory();
		Scanner scanner = new Scanner(inputstream,sf);
		java_cup.runtime.Symbol s = new Parser(scanner, sf, errorInfo).parse();
		if (s == null)
		    return null;
		else
		    return (xtypesyn) s.value;
	}
	

	public void report_error(String message, Object info) {
	    ErrInfo einfo = new ErrInfo(0, 0, message);
	    errorInfo.add(einfo);
	    einfo.raw = info;

    	    if (info instanceof ComplexSymbolFactory.ComplexSymbol) {
		ComplexSymbolFactory.ComplexSymbol s = ((ComplexSymbolFactory.ComplexSymbol) info);
		einfo.symbol = s;
		if (s != null && s.getRight() != null && s.getLeft() != null) {
			ComplexSymbolFactory.Location loc_abs = s.getLeft();
			ComplexSymbolFactory.Location loc_line = s.getRight();
	       	    	einfo.start = loc_abs.getLine();    
	       	    	einfo.end = loc_abs.getColumn();    
	       	    	einfo.line = loc_line.getLine();    
	       	    	einfo.column = loc_line.getColumn();    
	        }
	    }
	} 

  public void report_fatal_error(String message, Object info) {
      report_error(message, info);
  }
:}

terminal LBRACKET, RBRACKET, OP_SEQ, OP_POW, OP_STAR, INTEGER, REAL, BOOL, ERROR, OP_PRIME;

terminal String ID, STRING;

non terminal xtypesyn type, type_product;

non terminal String id;


precedence left OP_STAR;


type			::= type_product:t  				{: RESULT = t; :}
			| OP_SEQ LBRACKET type:t RBRACKET 		{: RESULT = new xtypesyn(xtypesymb.SEQ, t); :}
			| OP_POW LBRACKET type:t RBRACKET 		{: RESULT = new xtypesyn(xtypesymb.POW, t); :}
			| INTEGER								{: RESULT = new xtypesyn(xtypesymb.INTEGER); :}
			| REAL									{: RESULT = new xtypesyn(xtypesymb.REAL); :}
			| INTEGER OP_PRIME id:s					{: RESULT = new xtypesyn(xtypesymb.INTEGER, s); :}
			| REAL OP_PRIME id:s					{: RESULT = new xtypesyn(xtypesymb.REAL, s); :}
			| BOOL									{: RESULT = new xtypesyn(xtypesymb.BOOL); :}
			| ID:s									{: RESULT = new xtypesyn(xtypesymb.ENUM, s); :}	
			| LBRACKET type:t RBRACKET				{: RESULT = t; :}
			;
			
			
type_product		::= type_product:tt OP_STAR type:t		{: RESULT = tt.add(t); :}
			| type:a OP_STAR type:b 			{: RESULT = new xtypesyn(xtypesymb.PRODUCT, a, b); :}
			;
			
id			::= ID:i 									{: RESULT = i; :}
			| STRING:n 									{: RESULT = n; :}
			; 
			
			