
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Feb 10 21:28:36 GMT 2019
//----------------------------------------------------

package uk.ac.ncl.safecap.xtype;

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Feb 10 21:28:36 GMT 2019
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\017\000\002\002\003\000\002\002\004\000\002\002" +
    "\006\000\002\002\006\000\002\002\003\000\002\002\003" +
    "\000\002\002\005\000\002\002\005\000\002\002\003\000" +
    "\002\002\003\000\002\002\005\000\002\003\005\000\002" +
    "\003\005\000\002\004\003\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\035\000\020\004\014\006\004\007\011\011\005\012" +
    "\013\013\006\016\010\001\002\000\004\004\035\001\002" +
    "\000\012\002\ufffd\005\ufffd\010\ufffd\015\033\001\002\000" +
    "\010\002\ufff9\005\ufff9\010\ufff9\001\002\000\010\002\001" +
    "\005\001\010\031\001\002\000\010\002\ufff8\005\ufff8\010" +
    "\ufff8\001\002\000\004\004\026\001\002\000\006\002\025" +
    "\010\016\001\002\000\012\002\ufffc\005\ufffc\010\ufffc\015" +
    "\021\001\002\000\020\004\014\006\004\007\011\011\005" +
    "\012\013\013\006\016\010\001\002\000\006\005\017\010" +
    "\016\001\002\000\020\004\014\006\004\007\011\011\005" +
    "\012\013\013\006\016\010\001\002\000\010\002\ufff7\005" +
    "\ufff7\010\ufff7\001\002\000\010\002\ufff5\005\ufff5\010\ufff5" +
    "\001\002\000\006\016\022\017\023\001\002\000\010\002" +
    "\ufff4\005\ufff4\010\ufff4\001\002\000\010\002\ufff3\005\ufff3" +
    "\010\ufff3\001\002\000\010\002\ufffa\005\ufffa\010\ufffa\001" +
    "\002\000\004\002\000\001\002\000\020\004\014\006\004" +
    "\007\011\011\005\012\013\013\006\016\010\001\002\000" +
    "\006\005\030\010\016\001\002\000\010\002\ufffe\005\ufffe" +
    "\010\ufffe\001\002\000\020\004\014\006\004\007\011\011" +
    "\005\012\013\013\006\016\010\001\002\000\010\002\ufff6" +
    "\005\ufff6\010\ufff6\001\002\000\006\016\022\017\023\001" +
    "\002\000\010\002\ufffb\005\ufffb\010\ufffb\001\002\000\020" +
    "\004\014\006\004\007\011\011\005\012\013\013\006\016" +
    "\010\001\002\000\006\005\037\010\016\001\002\000\010" +
    "\002\uffff\005\uffff\010\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\035\000\006\002\011\003\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\014\003\006\001\001\000\002" +
    "\001\001\000\006\002\017\003\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\026\003\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\031\003\006\001\001\000" +
    "\002\001\001\000\004\004\033\001\001\000\002\001\001" +
    "\000\006\002\035\003\006\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	private Scanner scanner;

	public List<ErrInfo> errorInfo = new ArrayList<ErrInfo>(0);

	public Parser(	java_cup.runtime.Scanner s, 
			ComplexSymbolFactory sf,
			List<ErrInfo> errorInfo) {
			    super(s,sf);
			    this.errorInfo = errorInfo;
			}

	public static void main(String[] args) {
		try {
		    if (args.length > 0) {
			List<ErrInfo> errors = new ArrayList<ErrInfo>(0);
			xtypesyn s = parse(new java.io.FileInputStream(args[0]), errors);
			System.out.println("errors: " + errors);
			System.out.println("result: " + s);
		    }
		} catch (Throwable e) {
		    e.printStackTrace();
		}
	}
	
	public static xtypesyn parse(java.io.InputStream inputstream, List<ErrInfo> errorInfo) throws Exception
	{
		ExtComplexSymbolFactory sf = new ExtComplexSymbolFactory();
		Scanner scanner = new Scanner(inputstream,sf);
		java_cup.runtime.Symbol s = new Parser(scanner, sf, errorInfo).parse();
		if (s == null)
		    return null;
		else
		    return (xtypesyn) s.value;
	}
	

	public void report_error(String message, Object info) {
	    ErrInfo einfo = new ErrInfo(0, 0, message);
	    errorInfo.add(einfo);
	    einfo.raw = info;

    	    if (info instanceof ComplexSymbolFactory.ComplexSymbol) {
		ComplexSymbolFactory.ComplexSymbol s = ((ComplexSymbolFactory.ComplexSymbol) info);
		einfo.symbol = s;
		if (s != null && s.getRight() != null && s.getLeft() != null) {
			ComplexSymbolFactory.Location loc_abs = s.getLeft();
			ComplexSymbolFactory.Location loc_line = s.getRight();
	       	    	einfo.start = loc_abs.getLine();    
	       	    	einfo.end = loc_abs.getColumn();    
	       	    	einfo.line = loc_line.getLine();    
	       	    	einfo.column = loc_line.getColumn();    
	        }
	    }
	} 

  public void report_fatal_error(String message, Object info) {
      report_error(message, info);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // id ::= STRING 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // id ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_product ::= type OP_STAR type 
            {
              xtypesyn RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		xtypesyn a = (xtypesyn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		xtypesyn b = (xtypesyn)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new xtypesyn(xtypesymb.PRODUCT, a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_product",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type_product ::= type_product OP_STAR type 
            {
              xtypesyn RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		xtypesyn tt = (xtypesyn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		xtypesyn t = (xtypesyn)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tt.add(t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_product",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= LBRACKET type RBRACKET 
            {
              xtypesyn RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		xtypesyn t = (xtypesyn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= ID 
            {
              xtypesyn RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new xtypesyn(xtypesymb.ENUM, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= BOOL 
            {
              xtypesyn RESULT =null;
		 RESULT = new xtypesyn(xtypesymb.BOOL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= REAL OP_PRIME id 
            {
              xtypesyn RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new xtypesyn(xtypesymb.REAL, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= INTEGER OP_PRIME id 
            {
              xtypesyn RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new xtypesyn(xtypesymb.INTEGER, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type ::= REAL 
            {
              xtypesyn RESULT =null;
		 RESULT = new xtypesyn(xtypesymb.REAL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type ::= INTEGER 
            {
              xtypesyn RESULT =null;
		 RESULT = new xtypesyn(xtypesymb.INTEGER); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type ::= OP_POW LBRACKET type RBRACKET 
            {
              xtypesyn RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		xtypesyn t = (xtypesyn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new xtypesyn(xtypesymb.POW, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // type ::= OP_SEQ LBRACKET type RBRACKET 
            {
              xtypesyn RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		xtypesyn t = (xtypesyn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new xtypesyn(xtypesymb.SEQ, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= type EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		xtypesyn start_val = (xtypesyn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // type ::= type_product 
            {
              xtypesyn RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		xtypesyn t = (xtypesyn)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

