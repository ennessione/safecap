
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 26 11:43:09 BST 2019
//----------------------------------------------------

package uk.ac.ncl.prime.sim.lang.parser;

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 26 11:43:09 BST 2019
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\020\003\000\002\002\004\000\002\020" +
    "\004\000\002\026\004\000\002\026\002\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\005\000" +
    "\002\002\005\000\002\002\003\000\002\002\006\000\002" +
    "\002\006\000\002\002\005\000\002\002\005\000\002\002" +
    "\003\000\002\002\003\000\002\015\005\000\002\003\004" +
    "\000\002\003\003\000\002\025\003\000\002\025\003\000" +
    "\002\004\003\000\002\004\004\000\002\004\004\000\002" +
    "\004\003\000\002\004\003\000\002\024\005\000\002\024" +
    "\005\000\002\006\006\000\002\006\005\000\002\006\010" +
    "\000\002\005\010\000\002\007\004\000\002\007\002\000" +
    "\002\021\005\000\002\021\006\000\002\012\003\000\002" +
    "\012\002\000\002\010\005\000\002\010\003\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\006\000\002\011\006\000\002" +
    "\011\006\000\002\011\006\000\002\011\006\000\002\011" +
    "\006\000\002\011\006\000\002\011\006\000\002\011\006" +
    "\000\002\011\006\000\002\011\006\000\002\011\006\000" +
    "\002\011\006\000\002\011\006\000\002\011\004\000\002" +
    "\011\005\000\002\011\005\000\002\011\010\000\002\011" +
    "\005\000\002\011\005\000\002\011\011\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\004\000\002\016\006\000\002\016\006\000\002" +
    "\017\003\000\002\017\005\000\002\017\004\000\002\017" +
    "\005\000\002\023\005\000\002\023\003\000\002\027\003" +
    "\000\002\027\002\000\002\022\004\000\002\013\003\000" +
    "\002\013\003\000\002\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\104\004\042\006\025\010\020\011\013\013" +
    "\005\014\046\021\033\024\052\025\016\032\012\040\037" +
    "\041\006\042\015\043\040\044\036\052\017\053\022\054" +
    "\045\061\051\070\011\071\010\072\027\075\041\100\007" +
    "\106\023\107\050\111\044\116\035\120\021\121\032\124" +
    "\031\125\024\126\043\001\002\000\006\004\u010c\006\u010d" +
    "\001\002\000\004\004\u0109\001\002\000\004\004\u0106\001" +
    "\002\000\132\002\uff98\005\uff98\007\uff98\020\uff98\021\uff98" +
    "\022\uff98\023\uff98\026\uff98\027\uff98\030\uff98\031\uff98\033" +
    "\uff98\034\uff98\035\uff98\036\uff98\037\uff98\045\uff98\046\uff98" +
    "\047\uff98\050\uff98\051\uff98\055\uff98\056\uff98\057\uff98\060" +
    "\uff98\062\uff98\063\uff98\064\uff98\065\uff98\066\uff98\067\uff98" +
    "\073\uff98\074\uff98\076\uff98\077\uff98\103\uff98\105\uff98\110" +
    "\uff98\112\uff98\113\uff98\114\uff98\115\uff98\122\uff98\127\uff98" +
    "\001\002\000\004\004\u0103\001\002\000\004\004\u0100\001" +
    "\002\000\102\004\042\006\025\010\020\011\013\013\005" +
    "\014\046\021\033\024\052\025\016\032\012\040\037\041" +
    "\006\042\015\043\040\044\036\052\017\053\022\054\045" +
    "\061\051\070\011\071\010\072\027\075\041\100\007\106" +
    "\023\107\050\111\044\116\035\121\032\124\031\125\024" +
    "\126\043\001\002\000\132\002\uff95\005\uff95\007\uff95\020" +
    "\uff95\021\uff95\022\uff95\023\uff95\026\uff95\027\uff95\030\uff95" +
    "\031\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95\045" +
    "\uff95\046\uff95\047\uff95\050\uff95\051\uff95\055\uff95\056\uff95" +
    "\057\uff95\060\uff95\062\uff95\063\uff95\064\uff95\065\uff95\066" +
    "\uff95\067\uff95\073\uff95\074\uff95\076\uff95\077\uff95\103\uff95" +
    "\105\uff95\110\uff95\112\uff95\113\uff95\114\uff95\115\uff95\122" +
    "\uff95\127\uff95\001\002\000\004\002\376\001\002\000\004" +
    "\004\373\001\002\000\132\002\uff96\005\uff96\007\uff96\020" +
    "\uff96\021\uff96\022\uff96\023\uff96\026\uff96\027\uff96\030\uff96" +
    "\031\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96\045" +
    "\uff96\046\uff96\047\uff96\050\uff96\051\uff96\055\uff96\056\uff96" +
    "\057\uff96\060\uff96\062\uff96\063\uff96\064\uff96\065\uff96\066" +
    "\uff96\067\uff96\073\uff96\074\uff96\076\uff96\077\uff96\103\uff96" +
    "\105\uff96\110\uff96\112\uff96\113\uff96\114\uff96\115\uff96\122" +
    "\uff96\127\uff96\001\002\000\004\004\370\001\002\000\132" +
    "\002\uff94\005\uff94\007\uff94\020\uff94\021\uff94\022\uff94\023" +
    "\uff94\026\uff94\027\uff94\030\uff94\031\uff94\033\uff94\034\uff94" +
    "\035\uff94\036\uff94\037\uff94\045\uff94\046\uff94\047\uff94\050" +
    "\uff94\051\uff94\055\uff94\056\uff94\057\uff94\060\uff94\062\uff94" +
    "\063\uff94\064\uff94\065\uff94\066\uff94\067\uff94\073\uff94\074" +
    "\uff94\076\uff94\077\uff94\103\uff94\105\uff94\110\uff94\112\uff94" +
    "\113\uff94\114\uff94\115\uff94\122\uff94\127\uff94\001\002\000" +
    "\016\003\322\006\313\015\315\075\317\125\320\126\043" +
    "\001\002\000\004\004\306\001\002\000\004\125\053\001" +
    "\002\000\236\002\uff84\004\uff84\005\uff84\006\uff84\007\uff84" +
    "\010\uff84\011\uff84\013\uff84\014\uff84\020\uff84\021\uff84\022" +
    "\uff84\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84\030\uff84" +
    "\031\uff84\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84\037" +
    "\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84" +
    "\046\uff84\047\uff84\050\uff84\051\uff84\052\uff84\053\uff84\054" +
    "\uff84\055\uff84\056\uff84\057\uff84\060\uff84\061\uff84\062\uff84" +
    "\063\uff84\064\uff84\065\uff84\066\uff84\067\uff84\070\uff84\071" +
    "\uff84\072\uff84\073\uff84\074\uff84\075\uff84\076\uff84\077\uff84" +
    "\100\uff84\101\uff84\103\uff84\104\uff84\105\uff84\106\uff84\107" +
    "\uff84\110\uff84\111\uff84\112\uff84\113\uff84\114\uff84\115\uff84" +
    "\116\uff84\117\uff84\121\uff84\122\uff84\124\uff84\125\uff84\126" +
    "\uff84\127\uff84\001\002\000\102\004\042\006\025\010\020" +
    "\011\013\013\005\014\046\021\033\024\052\025\016\032" +
    "\012\040\037\041\006\042\015\043\040\044\036\052\017" +
    "\053\022\054\045\061\051\070\011\071\010\072\027\075" +
    "\041\100\007\106\023\107\050\111\044\116\035\121\032" +
    "\124\031\125\024\126\043\001\002\000\116\002\001\020" +
    "\124\021\111\022\077\023\125\026\070\027\064\030\061" +
    "\031\114\033\072\034\101\035\122\036\063\037\121\045" +
    "\106\046\120\047\107\050\116\051\075\055\076\056\117" +
    "\057\123\060\066\062\112\063\102\064\067\065\104\066" +
    "\073\067\115\073\103\103\074\105\071\112\110\113\062" +
    "\114\065\115\105\122\113\127\100\001\002\000\004\004" +
    "\276\001\002\000\132\002\uff91\005\uff91\007\uff91\020\uff91" +
    "\021\uff91\022\uff91\023\uff91\026\uff91\027\uff91\030\uff91\031" +
    "\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037\uff91\045\uff91" +
    "\046\uff91\047\uff91\050\uff91\051\uff91\055\uff91\056\uff91\057" +
    "\uff91\060\uff91\062\uff91\063\uff91\064\uff91\065\uff91\066\uff91" +
    "\067\uff91\073\uff91\074\uff91\076\uff91\077\uff91\103\uff91\105" +
    "\uff91\110\uff91\112\uff91\113\uff91\114\uff91\115\uff91\122\uff91" +
    "\127\uff91\001\002\000\132\002\uff82\005\uff82\007\uff82\020" +
    "\uff82\021\uff82\022\uff82\023\uff82\026\uff82\027\uff82\030\uff82" +
    "\031\uff82\033\uff82\034\uff82\035\uff82\036\uff82\037\uff82\045" +
    "\uff82\046\uff82\047\uff82\050\uff82\051\uff82\055\uff82\056\uff82" +
    "\057\uff82\060\uff82\062\uff82\063\uff82\064\uff82\065\uff82\066" +
    "\uff82\067\uff82\073\uff82\074\uff82\076\uff82\077\uff82\103\uff82" +
    "\105\uff82\110\uff82\112\uff82\113\uff82\114\uff82\115\uff82\122" +
    "\uff82\127\uff82\001\002\000\132\002\uff81\005\uff81\007\uff81" +
    "\020\uff81\021\uff81\022\uff81\023\uff81\026\uff81\027\uff81\030" +
    "\uff81\031\uff81\033\uff81\034\uff81\035\uff81\036\uff81\037\uff81" +
    "\045\uff81\046\uff81\047\uff81\050\uff81\051\uff81\055\uff81\056" +
    "\uff81\057\uff81\060\uff81\062\uff81\063\uff81\064\uff81\065\uff81" +
    "\066\uff81\067\uff81\073\uff81\074\uff81\076\uff81\077\uff81\103" +
    "\uff81\105\uff81\110\uff81\112\uff81\113\uff81\114\uff81\115\uff81" +
    "\122\uff81\127\uff81\001\002\000\102\004\042\006\025\010" +
    "\020\011\013\013\005\014\046\021\033\024\052\025\016" +
    "\032\012\040\037\041\006\042\015\043\040\044\036\052" +
    "\017\053\022\054\045\061\051\070\011\071\010\072\027" +
    "\075\041\100\007\106\023\107\050\111\044\116\035\121" +
    "\032\124\031\125\024\126\043\001\002\000\140\002\uff93" +
    "\004\uff8d\005\uff93\006\uff8d\007\uff93\020\uff93\021\uff93\022" +
    "\uff93\023\uff93\026\uff93\027\uff93\030\uff93\031\uff93\033\uff93" +
    "\034\uff93\035\uff93\036\uff93\037\uff93\045\uff93\046\uff93\047" +
    "\uff93\050\uff93\051\uff93\055\uff93\056\uff93\057\uff93\060\uff93" +
    "\062\uff93\063\uff93\064\uff93\065\uff93\066\uff93\067\uff93\073" +
    "\uff93\074\uff93\076\uff93\077\uff93\103\263\104\264\105\uff93" +
    "\110\uff93\112\uff93\113\uff93\114\uff93\115\uff93\122\uff93\127" +
    "\uff93\001\002\000\004\004\260\001\002\000\004\004\255" +
    "\001\002\000\004\004\252\001\002\000\004\004\247\001" +
    "\002\000\102\004\042\006\025\010\020\011\013\013\005" +
    "\014\046\021\033\024\052\025\016\032\012\040\037\041" +
    "\006\042\015\043\040\044\036\052\017\053\022\054\045" +
    "\061\051\070\011\071\010\072\027\075\041\100\007\106" +
    "\023\107\050\111\044\116\035\121\032\124\031\125\024" +
    "\126\043\001\002\000\102\004\042\006\025\010\020\011" +
    "\013\013\005\014\046\021\033\024\052\025\016\032\012" +
    "\040\037\041\006\042\015\043\040\044\036\052\017\053" +
    "\022\054\045\061\051\070\011\071\010\072\027\075\041" +
    "\100\007\106\023\107\050\111\044\116\035\121\032\124" +
    "\031\125\024\126\043\001\002\000\236\002\uff83\004\uff83" +
    "\005\uff83\006\uff83\007\uff83\010\uff83\011\uff83\013\uff83\014" +
    "\uff83\020\uff83\021\uff83\022\uff83\023\uff83\024\uff83\025\uff83" +
    "\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034" +
    "\uff83\035\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83" +
    "\043\uff83\044\uff83\045\uff83\046\uff83\047\uff83\050\uff83\051" +
    "\uff83\052\uff83\053\uff83\054\uff83\055\uff83\056\uff83\057\uff83" +
    "\060\uff83\061\uff83\062\uff83\063\uff83\064\uff83\065\uff83\066" +
    "\uff83\067\uff83\070\uff83\071\uff83\072\uff83\073\uff83\074\uff83" +
    "\075\uff83\076\uff83\077\uff83\100\uff83\101\uff83\103\uff83\104" +
    "\uff83\105\uff83\106\uff83\107\uff83\110\uff83\111\uff83\112\uff83" +
    "\113\uff83\114\uff83\115\uff83\116\uff83\117\uff83\121\uff83\122" +
    "\uff83\124\uff83\125\uff83\126\uff83\127\uff83\001\002\000\004" +
    "\125\053\001\002\000\004\004\226\001\002\000\004\004" +
    "\223\001\002\000\132\002\uff92\005\uff92\007\uff92\020\uff92" +
    "\021\uff92\022\uff92\023\uff92\026\uff92\027\uff92\030\uff92\031" +
    "\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92\045\uff92" +
    "\046\uff92\047\uff92\050\uff92\051\uff92\055\uff92\056\uff92\057" +
    "\uff92\060\uff92\062\uff92\063\uff92\064\uff92\065\uff92\066\uff92" +
    "\067\uff92\073\uff92\074\uff92\076\uff92\077\uff92\103\uff92\105" +
    "\uff92\110\uff92\112\uff92\113\uff92\114\uff92\115\uff92\122\uff92" +
    "\127\uff92\001\002\000\004\125\053\001\002\000\132\002" +
    "\uff99\005\uff99\007\uff99\020\uff99\021\uff99\022\uff99\023\uff99" +
    "\026\uff99\027\uff99\030\uff99\031\uff99\033\uff99\034\uff99\035" +
    "\uff99\036\uff99\037\uff99\045\uff99\046\uff99\047\uff99\050\uff99" +
    "\051\uff99\055\uff99\056\uff99\057\uff99\060\uff99\062\uff99\063" +
    "\uff99\064\uff99\065\uff99\066\uff99\067\uff99\073\uff99\074\uff99" +
    "\076\uff99\077\uff99\103\uff99\105\uff99\110\uff99\112\uff99\113" +
    "\uff99\114\uff99\115\uff99\122\uff99\127\uff99\001\002\000\132" +
    "\002\uff97\005\uff97\007\uff97\020\uff97\021\uff97\022\uff97\023" +
    "\uff97\026\uff97\027\uff97\030\uff97\031\uff97\033\uff97\034\uff97" +
    "\035\uff97\036\uff97\037\uff97\045\uff97\046\uff97\047\uff97\050" +
    "\uff97\051\uff97\055\uff97\056\uff97\057\uff97\060\uff97\062\uff97" +
    "\063\uff97\064\uff97\065\uff97\066\uff97\067\uff97\073\uff97\074" +
    "\uff97\076\uff97\077\uff97\103\uff97\105\uff97\110\uff97\112\uff97" +
    "\113\uff97\114\uff97\115\uff97\122\uff97\127\uff97\001\002\000" +
    "\112\004\ufffd\006\ufffd\010\ufffd\011\ufffd\013\ufffd\014\ufffd" +
    "\021\ufffd\024\ufffd\025\ufffd\032\ufffd\040\ufffd\041\ufffd\042" +
    "\ufffd\043\ufffd\044\ufffd\052\ufffd\053\ufffd\054\ufffd\061\ufffd" +
    "\070\ufffd\071\ufffd\072\ufffd\073\172\074\ufffd\075\ufffd\077" +
    "\ufffd\100\ufffd\106\ufffd\107\ufffd\111\ufffd\116\ufffd\117\ufffd" +
    "\121\ufffd\124\ufffd\125\ufffd\126\ufffd\001\002\000\110\004" +
    "\uff88\006\uff88\010\uff88\011\uff88\013\uff88\014\uff88\021\uff88" +
    "\024\uff88\025\uff88\032\uff88\040\uff88\041\uff88\042\uff88\043" +
    "\uff88\044\uff88\052\uff88\053\uff88\054\uff88\061\uff88\070\uff88" +
    "\071\uff88\072\uff88\074\uff88\075\uff88\077\uff88\100\uff88\106" +
    "\uff88\107\uff88\111\uff88\116\uff88\117\uff88\121\uff88\124\uff88" +
    "\125\uff88\126\uff88\001\002\000\104\004\042\006\025\010" +
    "\020\011\013\013\005\014\046\021\033\024\052\025\016" +
    "\032\012\040\037\041\006\042\015\043\040\044\036\052" +
    "\017\053\022\054\045\061\051\070\011\071\010\072\027" +
    "\074\057\075\041\100\007\106\023\107\050\111\044\116" +
    "\035\121\032\124\031\125\024\126\043\001\002\000\132" +
    "\002\uffa0\005\uffa0\007\uffa0\020\124\021\111\022\077\023" +
    "\125\026\070\027\064\030\061\031\114\033\072\034\101" +
    "\035\122\036\063\037\121\045\106\046\120\047\107\050" +
    "\116\051\075\055\076\056\117\057\123\060\066\062\112" +
    "\063\102\064\067\065\104\066\073\067\115\073\103\074" +
    "\uffa0\076\uffa0\077\uffa0\103\074\105\071\110\uffa0\112\110" +
    "\113\062\114\065\115\105\122\113\127\100\001\002\000" +
    "\004\125\053\001\002\000\110\004\uff89\006\uff89\010\uff89" +
    "\011\uff89\013\uff89\014\uff89\021\uff89\024\uff89\025\uff89\032" +
    "\uff89\040\uff89\041\uff89\042\uff89\043\uff89\044\uff89\052\uff89" +
    "\053\uff89\054\uff89\061\uff89\070\uff89\071\uff89\072\uff89\074" +
    "\uff89\075\uff89\077\uff89\100\uff89\106\uff89\107\uff89\111\uff89" +
    "\116\uff89\117\uff89\121\uff89\124\uff89\125\uff89\126\uff89\001" +
    "\002\000\102\004\042\006\025\010\020\011\013\013\005" +
    "\014\046\021\033\024\052\025\016\032\012\040\037\041" +
    "\006\042\015\043\040\044\036\052\017\053\022\054\045" +
    "\061\051\070\011\071\010\072\027\075\041\100\007\106" +
    "\023\107\050\111\044\116\035\121\032\124\031\125\024" +
    "\126\043\001\002\000\102\004\042\006\025\010\020\011" +
    "\013\013\005\014\046\021\033\024\052\025\016\032\012" +
    "\040\037\041\006\042\015\043\040\044\036\052\017\053" +
    "\022\054\045\061\051\070\011\071\010\072\027\075\041" +
    "\100\007\106\023\107\050\111\044\116\035\121\032\124" +
    "\031\125\024\126\043\001\002\000\102\004\042\006\025" +
    "\010\020\011\013\013\005\014\046\021\033\024\052\025" +
    "\016\032\012\040\037\041\006\042\015\043\040\044\036" +
    "\052\017\053\022\054\045\061\051\070\011\071\010\072" +
    "\027\075\041\100\007\106\023\107\050\111\044\116\035" +
    "\121\032\124\031\125\024\126\043\001\002\000\102\004" +
    "\042\006\025\010\020\011\013\013\005\014\046\021\033" +
    "\024\052\025\016\032\012\040\037\041\006\042\015\043" +
    "\040\044\036\052\017\053\022\054\045\061\051\070\011" +
    "\071\010\072\027\075\041\100\007\106\023\107\050\111" +
    "\044\116\035\121\032\124\031\125\024\126\043\001\002" +
    "\000\102\004\042\006\025\010\020\011\013\013\005\014" +
    "\046\021\033\024\052\025\016\032\012\040\037\041\006" +
    "\042\015\043\040\044\036\052\017\053\022\054\045\061" +
    "\051\070\011\071\010\072\027\075\041\100\007\106\023" +
    "\107\050\111\044\116\035\121\032\124\031\125\024\126" +
    "\043\001\002\000\102\004\042\006\025\010\020\011\013" +
    "\013\005\014\046\021\033\024\052\025\016\032\012\040" +
    "\037\041\006\042\015\043\040\044\036\052\017\053\022" +
    "\054\045\061\051\070\011\071\010\072\027\075\041\100" +
    "\007\106\023\107\050\111\044\116\035\121\032\124\031" +
    "\125\024\126\043\001\002\000\102\004\042\006\025\010" +
    "\020\011\013\013\005\014\046\021\033\024\052\025\016" +
    "\032\012\040\037\041\006\042\015\043\040\044\036\052" +
    "\017\053\022\054\045\061\051\070\011\071\010\072\027" +
    "\075\041\100\007\106\023\107\050\111\044\116\035\121" +
    "\032\124\031\125\024\126\043\001\002\000\102\004\042" +
    "\006\025\010\020\011\013\013\005\014\046\021\033\024" +
    "\052\025\016\032\012\040\037\041\006\042\015\043\040" +
    "\044\036\052\017\053\022\054\045\061\051\070\011\071" +
    "\010\072\027\075\041\100\007\106\023\107\050\111\044" +
    "\116\035\121\032\124\031\125\024\126\043\001\002\000" +
    "\102\004\042\006\025\010\020\011\013\013\005\014\046" +
    "\021\033\024\052\025\016\032\012\040\037\041\006\042" +
    "\015\043\040\044\036\052\017\053\022\054\045\061\051" +
    "\070\011\071\010\072\027\075\041\100\007\106\023\107" +
    "\050\111\044\116\035\121\032\124\031\125\024\126\043" +
    "\001\002\000\102\004\042\006\025\010\020\011\013\013" +
    "\005\014\046\021\033\024\052\025\016\032\012\040\037" +
    "\041\006\042\015\043\040\044\036\052\017\053\022\054" +
    "\045\061\051\070\011\071\010\072\027\075\041\100\007" +
    "\106\023\107\050\111\044\116\035\121\032\124\031\125" +
    "\024\126\043\001\002\000\102\004\042\006\025\010\020" +
    "\011\013\013\005\014\046\021\033\024\052\025\016\032" +
    "\012\040\037\041\006\042\015\043\040\044\036\052\017" +
    "\053\022\054\045\061\051\070\011\071\010\072\027\075" +
    "\041\100\007\106\023\107\050\111\044\116\035\121\032" +
    "\124\031\125\024\126\043\001\002\000\102\004\042\006" +
    "\025\010\020\011\013\013\005\014\046\021\033\024\052" +
    "\025\016\032\012\040\037\041\006\042\015\043\040\044" +
    "\036\052\017\053\022\054\045\061\051\070\011\071\010" +
    "\072\027\075\041\100\007\106\023\107\050\111\044\116" +
    "\035\121\032\124\031\125\024\126\043\001\002\000\102" +
    "\004\042\006\025\010\020\011\013\013\005\014\046\021" +
    "\033\024\052\025\016\032\012\040\037\041\006\042\015" +
    "\043\040\044\036\052\017\053\022\054\045\061\051\070" +
    "\011\071\010\072\027\075\041\100\007\106\023\107\050" +
    "\111\044\116\035\121\032\124\031\125\024\126\043\001" +
    "\002\000\102\004\042\006\025\010\020\011\013\013\005" +
    "\014\046\021\033\024\052\025\016\032\012\040\037\041" +
    "\006\042\015\043\040\044\036\052\017\053\022\054\045" +
    "\061\051\070\011\071\010\072\027\075\041\100\007\106" +
    "\023\107\050\111\044\116\035\121\032\124\031\125\024" +
    "\126\043\001\002\000\102\004\042\006\025\010\020\011" +
    "\013\013\005\014\046\021\033\024\052\025\016\032\012" +
    "\040\037\041\006\042\015\043\040\044\036\052\017\053" +
    "\022\054\045\061\051\070\011\071\010\072\027\075\041" +
    "\100\007\106\023\107\050\111\044\116\035\121\032\124" +
    "\031\125\024\126\043\001\002\000\132\002\uff90\005\uff90" +
    "\007\uff90\020\uff90\021\uff90\022\uff90\023\uff90\026\uff90\027" +
    "\uff90\030\uff90\031\uff90\033\uff90\034\uff90\035\uff90\036\uff90" +
    "\037\uff90\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90\055" +
    "\uff90\056\uff90\057\uff90\060\uff90\062\uff90\063\uff90\064\uff90" +
    "\065\uff90\066\uff90\067\uff90\073\uff90\074\uff90\076\uff90\077" +
    "\uff90\103\uff90\105\uff90\110\uff90\112\uff90\113\uff90\114\uff90" +
    "\115\uff90\122\uff90\127\uff90\001\002\000\102\004\042\006" +
    "\025\010\020\011\013\013\005\014\046\021\033\024\052" +
    "\025\016\032\012\040\037\041\006\042\015\043\040\044" +
    "\036\052\017\053\022\054\045\061\051\070\011\071\010" +
    "\072\027\075\041\100\007\106\023\107\050\111\044\116" +
    "\035\121\032\124\031\125\024\126\043\001\002\000\102" +
    "\004\042\006\025\010\020\011\013\013\005\014\046\021" +
    "\033\024\052\025\016\032\012\040\037\041\006\042\015" +
    "\043\040\044\036\052\017\053\022\054\045\061\051\070" +
    "\011\071\010\072\027\075\041\100\007\106\023\107\050" +
    "\111\044\116\035\121\032\124\031\125\024\126\043\001" +
    "\002\000\102\004\042\006\025\010\020\011\013\013\005" +
    "\014\046\021\033\024\052\025\016\032\012\040\037\041" +
    "\006\042\015\043\040\044\036\052\017\053\022\054\045" +
    "\061\051\070\011\071\010\072\027\075\041\100\007\106" +
    "\023\107\050\111\044\116\035\121\032\124\031\125\024" +
    "\126\043\001\002\000\102\004\042\006\025\010\020\011" +
    "\013\013\005\014\046\021\033\024\052\025\016\032\012" +
    "\040\037\041\006\042\015\043\040\044\036\052\017\053" +
    "\022\054\045\061\051\070\011\071\010\072\027\075\041" +
    "\100\007\106\023\107\050\111\044\116\035\121\032\124" +
    "\031\125\024\126\043\001\002\000\102\004\042\006\025" +
    "\010\020\011\013\013\005\014\046\021\033\024\052\025" +
    "\016\032\012\040\037\041\006\042\015\043\040\044\036" +
    "\052\017\053\022\054\045\061\051\070\011\071\010\072" +
    "\027\075\041\100\007\106\023\107\050\111\044\116\035" +
    "\121\032\124\031\125\024\126\043\001\002\000\102\004" +
    "\042\006\025\010\020\011\013\013\005\014\046\021\033" +
    "\024\052\025\016\032\012\040\037\041\006\042\015\043" +
    "\040\044\036\052\017\053\022\054\045\061\051\070\011" +
    "\071\010\072\027\075\041\100\007\106\023\107\050\111" +
    "\044\116\035\121\032\124\031\125\024\126\043\001\002" +
    "\000\102\004\042\006\025\010\020\011\013\013\005\014" +
    "\046\021\033\024\052\025\016\032\012\040\037\041\006" +
    "\042\015\043\040\044\036\052\017\053\022\054\045\061" +
    "\051\070\011\071\010\072\027\075\041\100\007\106\023" +
    "\107\050\111\044\116\035\121\032\124\031\125\024\126" +
    "\043\001\002\000\102\004\042\006\025\010\020\011\013" +
    "\013\005\014\046\021\033\024\052\025\016\032\012\040" +
    "\037\041\006\042\015\043\040\044\036\052\017\053\022" +
    "\054\045\061\051\070\011\071\010\072\027\075\041\100" +
    "\007\106\023\107\050\111\044\116\035\121\032\124\031" +
    "\125\024\126\043\001\002\000\102\004\042\006\025\010" +
    "\020\011\013\013\005\014\046\021\033\024\052\025\016" +
    "\032\012\040\037\041\006\042\015\043\040\044\036\052" +
    "\017\053\022\054\045\061\051\070\011\071\010\072\027" +
    "\075\041\100\007\106\023\107\050\111\044\116\035\121" +
    "\032\124\031\125\024\126\043\001\002\000\102\004\042" +
    "\006\025\010\020\011\013\013\005\014\046\021\033\024" +
    "\052\025\016\032\012\040\037\041\006\042\015\043\040" +
    "\044\036\052\017\053\022\054\045\061\051\070\011\071" +
    "\010\072\027\075\041\100\007\106\023\107\050\111\044" +
    "\116\035\121\032\124\031\125\024\126\043\001\002\000" +
    "\102\004\042\006\025\010\020\011\013\013\005\014\046" +
    "\021\033\024\052\025\016\032\012\040\037\041\006\042" +
    "\015\043\040\044\036\052\017\053\022\054\045\061\051" +
    "\070\011\071\010\072\027\075\041\100\007\106\023\107" +
    "\050\111\044\116\035\121\032\124\031\125\024\126\043" +
    "\001\002\000\102\004\042\006\025\010\020\011\013\013" +
    "\005\014\046\021\033\024\052\025\016\032\012\040\037" +
    "\041\006\042\015\043\040\044\036\052\017\053\022\054" +
    "\045\061\051\070\011\071\010\072\027\075\041\100\007" +
    "\106\023\107\050\111\044\116\035\121\032\124\031\125" +
    "\024\126\043\001\002\000\102\004\042\006\025\010\020" +
    "\011\013\013\005\014\046\021\033\024\052\025\016\032" +
    "\012\040\037\041\006\042\015\043\040\044\036\052\017" +
    "\053\022\054\045\061\051\070\011\071\010\072\027\075" +
    "\041\100\007\106\023\107\050\111\044\116\035\121\032" +
    "\124\031\125\024\126\043\001\002\000\136\002\uffb7\004" +
    "\uff8b\005\uffb7\006\uff8b\007\uffb7\020\uffb7\021\uffb7\022\uffb7" +
    "\023\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\033\uffb7\034" +
    "\uffb7\035\uffb7\036\uffb7\037\uffb7\045\uffb7\046\uffb7\047\uffb7" +
    "\050\uffb7\051\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\062" +
    "\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\073\uffb7" +
    "\074\uffb7\076\uffb7\077\uffb7\103\uffb7\105\uffb7\110\uffb7\112" +
    "\uffb7\113\uffb7\114\uffb7\115\uffb7\122\uffb7\127\uffb7\001\002" +
    "\000\102\004\042\006\025\010\020\011\013\013\005\014" +
    "\046\021\033\024\052\025\016\032\012\040\037\041\006" +
    "\042\015\043\040\044\036\052\017\053\022\054\045\061" +
    "\051\070\011\071\010\072\027\075\041\100\007\106\023" +
    "\107\050\111\044\116\035\121\032\124\031\125\024\126" +
    "\043\001\002\000\102\004\042\006\025\010\020\011\013" +
    "\013\005\014\046\021\033\024\052\025\016\032\012\040" +
    "\037\041\006\042\015\043\040\044\036\052\017\053\022" +
    "\054\045\061\051\070\011\071\010\072\027\075\041\100" +
    "\007\106\023\107\050\111\044\116\035\121\032\124\031" +
    "\125\024\126\043\001\002\000\102\004\042\006\025\010" +
    "\020\011\013\013\005\014\046\021\033\024\052\025\016" +
    "\032\012\040\037\041\006\042\015\043\040\044\036\052" +
    "\017\053\022\054\045\061\051\070\011\071\010\072\027" +
    "\075\041\100\007\106\023\107\050\111\044\116\035\121" +
    "\032\124\031\125\024\126\043\001\002\000\102\004\042" +
    "\006\025\010\020\011\013\013\005\014\046\021\033\024" +
    "\052\025\016\032\012\040\037\041\006\042\015\043\040" +
    "\044\036\052\017\053\022\054\045\061\051\070\011\071" +
    "\010\072\027\075\041\100\007\106\023\107\050\111\044" +
    "\116\035\121\032\124\031\125\024\126\043\001\002\000" +
    "\102\004\042\006\025\010\020\011\013\013\005\014\046" +
    "\021\033\024\052\025\016\032\012\040\037\041\006\042" +
    "\015\043\040\044\036\052\017\053\022\054\045\061\051" +
    "\070\011\071\010\072\027\075\041\100\007\106\023\107" +
    "\050\111\044\116\035\121\032\124\031\125\024\126\043" +
    "\001\002\000\102\004\042\006\025\010\020\011\013\013" +
    "\005\014\046\021\033\024\052\025\016\032\012\040\037" +
    "\041\006\042\015\043\040\044\036\052\017\053\022\054" +
    "\045\061\051\070\011\071\010\072\027\075\041\100\007" +
    "\106\023\107\050\111\044\116\035\121\032\124\031\125" +
    "\024\126\043\001\002\000\102\004\042\006\025\010\020" +
    "\011\013\013\005\014\046\021\033\024\052\025\016\032" +
    "\012\040\037\041\006\042\015\043\040\044\036\052\017" +
    "\053\022\054\045\061\051\070\011\071\010\072\027\075" +
    "\041\100\007\106\023\107\050\111\044\116\035\121\032" +
    "\124\031\125\024\126\043\001\002\000\132\002\uffc0\005" +
    "\uffc0\007\uffc0\020\124\021\111\022\077\023\uffc0\026\070" +
    "\027\uffc0\030\uffc0\031\uffc0\033\uffc0\034\101\035\122\036" +
    "\063\037\121\045\106\046\120\047\107\050\116\051\075" +
    "\055\076\056\uffc0\057\uffc0\060\066\062\uffc0\063\uffc0\064" +
    "\uffc0\065\uffc0\066\073\067\uffc0\073\uffc0\074\uffc0\076\uffc0" +
    "\077\uffc0\103\074\105\uffc0\110\uffc0\112\110\113\062\114" +
    "\uffc0\115\105\122\113\127\100\001\002\000\132\002\uffd6" +
    "\005\uffd6\007\uffd6\020\uffd6\021\uffd6\022\077\023\uffd6\026" +
    "\070\027\uffd6\030\uffd6\031\uffd6\033\uffd6\034\101\035\122" +
    "\036\063\037\121\045\106\046\120\047\107\050\116\051" +
    "\075\055\076\056\uffd6\057\uffd6\060\066\062\uffd6\063\uffd6" +
    "\064\uffd6\065\uffd6\066\073\067\uffd6\073\uffd6\074\uffd6\076" +
    "\uffd6\077\uffd6\103\074\105\uffd6\110\uffd6\112\110\113\062" +
    "\114\uffd6\115\105\122\113\127\100\001\002\000\122\002" +
    "\uffba\005\uffba\007\uffba\020\124\021\111\022\077\023\125" +
    "\026\070\027\uffba\030\uffba\031\uffba\033\uffba\034\101\035" +
    "\122\036\063\037\121\045\106\046\120\047\107\050\116" +
    "\051\075\055\076\060\066\062\uffba\063\uffba\064\uffba\065" +
    "\uffba\066\073\067\115\074\uffba\076\uffba\077\uffba\103\074" +
    "\105\uffba\110\uffba\112\110\113\062\115\105\122\113\127" +
    "\100\001\002\000\132\002\uffcf\005\uffcf\007\uffcf\020\uffcf" +
    "\021\uffcf\022\uffcf\023\uffcf\026\uffcf\027\uffcf\030\uffcf\031" +
    "\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\045\uffcf" +
    "\046\120\047\107\050\116\051\uffcf\055\076\056\uffcf\057" +
    "\uffcf\060\066\062\uffcf\063\uffcf\064\uffcf\065\uffcf\066\073" +
    "\067\uffcf\073\uffcf\074\uffcf\076\uffcf\077\uffcf\103\074\105" +
    "\uffcf\110\uffcf\112\uffcf\113\uffcf\114\uffcf\115\uffcf\122\uffcf" +
    "\127\100\001\002\000\132\002\uffd0\005\uffd0\007\uffd0\020" +
    "\uffd0\021\uffd0\022\uffd0\023\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\045" +
    "\uffd0\046\120\047\107\050\116\051\uffd0\055\076\056\uffd0" +
    "\057\uffd0\060\066\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066" +
    "\073\067\uffd0\073\uffd0\074\uffd0\076\uffd0\077\uffd0\103\074" +
    "\105\uffd0\110\uffd0\112\uffd0\113\uffd0\114\uffd0\115\uffd0\122" +
    "\uffd0\127\100\001\002\000\132\002\uffc4\005\uffc4\007\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\023\uffc4\026\uffc4\027\uffc4\030" +
    "\uffc4\031\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4" +
    "\045\uffc4\046\uffc4\047\uffc4\050\116\051\uffc4\055\uffc4\056" +
    "\uffc4\057\uffc4\060\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4" +
    "\066\073\067\uffc4\073\uffc4\074\uffc4\076\uffc4\077\uffc4\103" +
    "\074\105\uffc4\110\uffc4\112\uffc4\113\uffc4\114\uffc4\115\uffc4" +
    "\122\uffc4\127\100\001\002\000\122\002\uffbb\005\uffbb\007" +
    "\uffbb\020\124\021\111\022\077\023\125\026\070\027\uffbb" +
    "\030\uffbb\031\uffbb\033\uffbb\034\101\035\122\036\063\037" +
    "\121\045\106\046\120\047\107\050\116\051\075\055\076" +
    "\060\066\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066\073\067" +
    "\115\074\uffbb\076\uffbb\077\uffbb\103\074\105\uffbb\110\uffbb" +
    "\112\110\113\062\115\105\122\113\127\100\001\002\000" +
    "\132\002\uffbd\005\uffbd\007\uffbd\020\124\021\111\022\077" +
    "\023\uffbd\026\070\027\uffbd\030\uffbd\031\uffbd\033\uffbd\034" +
    "\101\035\122\036\063\037\121\045\106\046\120\047\107" +
    "\050\116\051\075\055\076\056\uffbd\057\uffbd\060\066\062" +
    "\uffbd\063\uffbd\064\uffbd\065\uffbd\066\073\067\uffbd\073\uffbd" +
    "\074\uffbd\076\uffbd\077\uffbd\103\074\105\uffbd\110\uffbd\112" +
    "\110\113\062\114\uffbd\115\105\122\113\127\100\001\002" +
    "\000\116\002\uffca\005\uffca\007\uffca\020\124\021\111\022" +
    "\077\023\125\026\070\034\101\035\122\036\063\037\121" +
    "\045\106\046\120\047\107\050\116\051\075\055\076\056" +
    "\117\057\123\060\066\064\uffca\065\uffca\066\073\067\115" +
    "\073\103\074\uffca\076\uffca\077\uffca\103\074\105\uffca\110" +
    "\uffca\112\110\113\062\114\065\115\105\122\113\127\100" +
    "\001\002\000\132\002\uffbe\005\uffbe\007\uffbe\020\uffbe\021" +
    "\uffbe\022\uffbe\023\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\045\uffbe\046" +
    "\120\047\107\050\116\051\uffbe\055\076\056\uffbe\057\uffbe" +
    "\060\066\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066\073\067" +
    "\uffbe\073\uffbe\074\uffbe\076\uffbe\077\uffbe\103\074\105\uffbe" +
    "\110\uffbe\112\uffbe\113\uffbe\114\uffbe\115\uffbe\122\uffbe\127" +
    "\100\001\002\000\116\002\uffcd\005\uffcd\007\uffcd\020\124" +
    "\021\111\022\077\023\125\026\070\034\101\035\122\036" +
    "\063\037\121\045\106\046\120\047\107\050\116\051\075" +
    "\055\076\056\117\057\123\060\066\064\uffcd\065\uffcd\066" +
    "\073\067\115\073\103\074\uffcd\076\uffcd\077\uffcd\103\074" +
    "\105\uffcd\110\uffcd\112\110\113\062\114\065\115\105\122" +
    "\113\127\100\001\002\000\132\002\uffd5\005\uffd5\007\uffd5" +
    "\020\uffd5\021\uffd5\022\077\023\uffd5\026\070\027\uffd5\030" +
    "\uffd5\031\uffd5\033\uffd5\034\101\035\122\036\063\037\121" +
    "\045\106\046\120\047\107\050\116\051\075\055\076\056" +
    "\uffd5\057\uffd5\060\066\062\uffd5\063\uffd5\064\uffd5\065\uffd5" +
    "\066\073\067\uffd5\073\uffd5\074\uffd5\076\uffd5\077\uffd5\103" +
    "\074\105\uffd5\110\uffd5\112\110\113\062\114\uffd5\115\105" +
    "\122\113\127\100\001\002\000\132\002\uff9e\005\uff9e\007" +
    "\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\026\uff9e\027\uff9e" +
    "\030\uff9e\031\uff9e\033\uff9e\034\uff9e\035\122\036\063\037" +
    "\121\045\106\046\120\047\107\050\116\051\075\055\076" +
    "\056\uff9e\057\uff9e\060\066\062\uff9e\063\uff9e\064\uff9e\065" +
    "\uff9e\066\073\067\uff9e\073\uff9e\074\uff9e\076\uff9e\077\uff9e" +
    "\103\074\105\uff9e\110\uff9e\112\110\113\062\114\uff9e\115" +
    "\105\122\113\127\100\001\002\000\132\002\uffc3\005\uffc3" +
    "\007\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\026\uffc3\027" +
    "\uffc3\030\uffc3\031\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3" +
    "\037\uffc3\045\uffc3\046\uffc3\047\uffc3\050\116\051\uffc3\055" +
    "\uffc3\056\uffc3\057\uffc3\060\uffc3\062\uffc3\063\uffc3\064\uffc3" +
    "\065\uffc3\066\073\067\uffc3\073\uffc3\074\uffc3\076\uffc3\077" +
    "\uffc3\103\074\105\uffc3\110\uffc3\112\uffc3\113\uffc3\114\uffc3" +
    "\115\uffc3\122\uffc3\127\100\001\002\000\132\002\uffbf\005" +
    "\uffbf\007\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\026\uffbf" +
    "\027\uffbf\030\uffbf\031\uffbf\033\uffbf\034\uffbf\035\uffbf\036" +
    "\uffbf\037\uffbf\045\uffbf\046\120\047\107\050\116\051\uffbf" +
    "\055\076\056\uffbf\057\uffbf\060\066\062\uffbf\063\uffbf\064" +
    "\uffbf\065\uffbf\066\073\067\uffbf\073\uffbf\074\uffbf\076\uffbf" +
    "\077\uffbf\103\074\105\uffbf\110\uffbf\112\uffbf\113\uffbf\114" +
    "\uffbf\115\uffbf\122\uffbf\127\100\001\002\000\132\002\uff9d" +
    "\005\uff9d\007\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\026" +
    "\uff9d\027\uff9d\030\uff9d\031\uff9d\033\uff9d\034\uff9d\035\122" +
    "\036\063\037\121\045\106\046\120\047\107\050\116\051" +
    "\075\055\076\056\uff9d\057\uff9d\060\066\062\uff9d\063\uff9d" +
    "\064\uff9d\065\uff9d\066\073\067\uff9d\073\uff9d\074\uff9d\076" +
    "\uff9d\077\uff9d\103\074\105\uff9d\110\uff9d\112\110\113\062" +
    "\114\uff9d\115\105\122\113\127\100\001\002\000\132\002" +
    "\uffd7\005\uffd7\007\uffd7\020\124\021\111\022\077\023\125" +
    "\026\070\027\064\030\061\031\114\033\072\034\101\035" +
    "\122\036\063\037\121\045\106\046\120\047\107\050\116" +
    "\051\075\055\076\056\117\057\123\060\066\062\112\063" +
    "\102\064\uffd7\065\uffd7\066\073\067\115\073\103\074\uffd7" +
    "\076\uffd7\077\uffd7\103\074\105\uffd7\110\uffd7\112\110\113" +
    "\062\114\065\115\105\122\113\127\100\001\002\000\122" +
    "\002\uffc2\005\uffc2\007\uffc2\020\124\021\111\022\077\023" +
    "\125\026\070\027\uffc2\030\uffc2\031\uffc2\033\uffc2\034\101" +
    "\035\122\036\063\037\121\045\106\046\120\047\107\050" +
    "\116\051\075\055\076\060\066\062\uffc2\063\uffc2\064\uffc2" +
    "\065\uffc2\066\073\067\115\074\uffc2\076\uffc2\077\uffc2\103" +
    "\074\105\uffc2\110\uffc2\112\110\113\062\115\105\122\113" +
    "\127\100\001\002\000\116\002\uffcc\005\uffcc\007\uffcc\020" +
    "\124\021\111\022\077\023\125\026\070\034\101\035\122" +
    "\036\063\037\121\045\106\046\120\047\107\050\116\051" +
    "\075\055\076\056\117\057\123\060\066\064\uffcc\065\uffcc" +
    "\066\073\067\115\073\103\074\uffcc\076\uffcc\077\uffcc\103" +
    "\074\105\uffcc\110\uffcc\112\110\113\062\114\065\115\105" +
    "\122\113\127\100\001\002\000\132\002\uffc7\005\uffc7\007" +
    "\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\026\uffc7\027\uffc7" +
    "\030\uffc7\031\uffc7\033\uffc7\034\uffc7\035\122\036\063\037" +
    "\121\045\106\046\120\047\107\050\116\051\075\055\076" +
    "\056\uffc7\057\uffc7\060\066\062\uffc7\063\uffc7\064\uffc7\065" +
    "\uffc7\066\073\067\uffc7\073\uffc7\074\uffc7\076\uffc7\077\uffc7" +
    "\103\074\105\uffc7\110\uffc7\112\110\113\062\114\uffc7\115" +
    "\105\122\113\127\100\001\002\000\132\002\uffd4\005\uffd4" +
    "\007\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\026\uffd4\027" +
    "\uffd4\030\uffd4\031\uffd4\033\uffd4\034\101\035\122\036\063" +
    "\037\121\045\106\046\120\047\107\050\116\051\075\055" +
    "\076\056\uffd4\057\uffd4\060\066\062\uffd4\063\uffd4\064\uffd4" +
    "\065\uffd4\066\073\067\uffd4\073\uffd4\074\uffd4\076\uffd4\077" +
    "\uffd4\103\074\105\uffd4\110\uffd4\112\110\113\062\114\uffd4" +
    "\115\105\122\113\127\100\001\002\000\132\002\uffc6\005" +
    "\uffc6\007\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\026\uffc6" +
    "\027\uffc6\030\uffc6\031\uffc6\033\uffc6\034\uffc6\035\uffc6\036" +
    "\uffc6\037\uffc6\045\uffc6\046\uffc6\047\uffc6\050\116\051\uffc6" +
    "\055\uffc6\056\uffc6\057\uffc6\060\uffc6\062\uffc6\063\uffc6\064" +
    "\uffc6\065\uffc6\066\073\067\uffc6\073\uffc6\074\uffc6\076\uffc6" +
    "\077\uffc6\103\074\105\uffc6\110\uffc6\112\uffc6\113\uffc6\114" +
    "\uffc6\115\uffc6\122\uffc6\127\100\001\002\000\132\002\uffd1" +
    "\005\uffd1\007\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\026" +
    "\uffd1\027\uffd1\030\uffd1\031\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\036\uffd1\037\uffd1\045\uffd1\046\120\047\107\050\116\051" +
    "\uffd1\055\076\056\uffd1\057\uffd1\060\066\062\uffd1\063\uffd1" +
    "\064\uffd1\065\uffd1\066\073\067\uffd1\073\uffd1\074\uffd1\076" +
    "\uffd1\077\uffd1\103\074\105\uffd1\110\uffd1\112\uffd1\113\uffd1" +
    "\114\uffd1\115\uffd1\122\uffd1\127\100\001\002\000\132\002" +
    "\uffbc\005\uffbc\007\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\031\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\036\uffbc\037\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc" +
    "\051\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\062\uffbc\063" +
    "\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\073\uffbc\074\uffbc" +
    "\076\uffbc\077\uffbc\103\uffbc\105\uffbc\110\uffbc\112\uffbc\113" +
    "\uffbc\114\uffbc\115\uffbc\122\uffbc\127\100\001\002\000\132" +
    "\002\uff9b\005\uff9b\007\uff9b\020\uff9b\021\uff9b\022\uff9b\023" +
    "\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\033\uff9b\034\uff9b" +
    "\035\uff9b\036\uff9b\037\uff9b\045\uff9b\046\uff9b\047\uff9b\050" +
    "\uff9b\051\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\062\uff9b" +
    "\063\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\073\uff9b\074" +
    "\uff9b\076\uff9b\077\uff9b\103\074\105\uff9b\110\uff9b\112\uff9b" +
    "\113\uff9b\114\uff9b\115\uff9b\122\uff9b\127\100\001\002\000" +
    "\116\002\uffc8\005\uffc8\007\uffc8\020\124\021\111\022\077" +
    "\023\125\026\070\034\101\035\122\036\063\037\121\045" +
    "\106\046\120\047\107\050\116\051\075\055\076\056\117" +
    "\057\123\060\066\064\uffc8\065\uffc8\066\073\067\115\073" +
    "\103\074\uffc8\076\uffc8\077\uffc8\103\074\105\uffc8\110\uffc8" +
    "\112\110\113\062\114\065\115\105\122\113\127\100\001" +
    "\002\000\130\002\uffce\005\uffce\007\uffce\020\124\021\111" +
    "\022\077\023\125\026\070\027\064\030\061\031\114\033" +
    "\072\034\101\035\122\036\063\037\121\045\106\046\120" +
    "\047\107\050\116\051\075\055\076\056\117\057\123\060" +
    "\066\062\112\063\102\064\067\065\104\066\073\067\115" +
    "\073\103\074\uffce\076\uffce\077\uffce\103\074\110\uffce\112" +
    "\110\113\062\114\065\115\105\122\113\127\100\001\002" +
    "\000\132\002\uffd3\005\uffd3\007\uffd3\020\uffd3\021\uffd3\022" +
    "\uffd3\023\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\033\uffd3" +
    "\034\101\035\122\036\063\037\121\045\106\046\120\047" +
    "\107\050\116\051\075\055\076\056\uffd3\057\uffd3\060\066" +
    "\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066\073\067\uffd3\073" +
    "\uffd3\074\uffd3\076\uffd3\077\uffd3\103\074\105\uffd3\110\uffd3" +
    "\112\110\113\062\114\uffd3\115\105\122\113\127\100\001" +
    "\002\000\132\002\uffd8\005\uffd8\007\uffd8\020\124\021\111" +
    "\022\077\023\125\026\070\027\064\030\061\031\114\033" +
    "\072\034\101\035\122\036\063\037\121\045\106\046\120" +
    "\047\107\050\116\051\075\055\076\056\117\057\123\060" +
    "\066\062\112\063\102\064\uffd8\065\uffd8\066\073\067\115" +
    "\073\103\074\uffd8\076\uffd8\077\uffd8\103\074\105\uffd8\110" +
    "\uffd8\112\110\113\062\114\065\115\105\122\113\127\100" +
    "\001\002\000\132\002\uffc5\005\uffc5\007\uffc5\020\uffc5\021" +
    "\uffc5\022\uffc5\023\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5" +
    "\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\050\116\051\uffc5\055\uffc5\056\uffc5\057\uffc5" +
    "\060\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\066\073\067" +
    "\uffc5\073\uffc5\074\uffc5\076\uffc5\077\uffc5\103\074\105\uffc5" +
    "\110\uffc5\112\uffc5\113\uffc5\114\uffc5\115\uffc5\122\uffc5\127" +
    "\100\001\002\000\122\002\uffc1\005\uffc1\007\uffc1\020\124" +
    "\021\111\022\077\023\125\026\070\027\uffc1\030\uffc1\031" +
    "\uffc1\033\uffc1\034\101\035\122\036\063\037\121\045\106" +
    "\046\120\047\107\050\116\051\075\055\076\060\066\062" +
    "\uffc1\063\uffc1\064\uffc1\065\uffc1\066\073\067\115\074\uffc1" +
    "\076\uffc1\077\uffc1\103\074\105\uffc1\110\uffc1\112\110\113" +
    "\062\115\105\122\113\127\100\001\002\000\116\002\uffcb" +
    "\005\uffcb\007\uffcb\020\124\021\111\022\077\023\125\026" +
    "\070\034\101\035\122\036\063\037\121\045\106\046\120" +
    "\047\107\050\116\051\075\055\076\056\117\057\123\060" +
    "\066\064\uffcb\065\uffcb\066\073\067\115\073\103\074\uffcb" +
    "\076\uffcb\077\uffcb\103\074\105\uffcb\110\uffcb\112\110\113" +
    "\062\114\065\115\105\122\113\127\100\001\002\000\132" +
    "\002\uffd2\005\uffd2\007\uffd2\020\uffd2\021\uffd2\022\uffd2\023" +
    "\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\033\uffd2\034\uffd2" +
    "\035\uffd2\036\uffd2\037\uffd2\045\uffd2\046\120\047\107\050" +
    "\116\051\uffd2\055\076\056\uffd2\057\uffd2\060\066\062\uffd2" +
    "\063\uffd2\064\uffd2\065\uffd2\066\073\067\uffd2\073\uffd2\074" +
    "\uffd2\076\uffd2\077\uffd2\103\074\105\uffd2\110\uffd2\112\uffd2" +
    "\113\uffd2\114\uffd2\115\uffd2\122\uffd2\127\100\001\002\000" +
    "\132\002\uff9c\005\uff9c\007\uff9c\020\uff9c\021\uff9c\022\uff9c" +
    "\023\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\033\uff9c\034" +
    "\uff9c\035\122\036\063\037\121\045\106\046\120\047\107" +
    "\050\116\051\075\055\076\056\uff9c\057\uff9c\060\066\062" +
    "\uff9c\063\uff9c\064\uff9c\065\uff9c\066\073\067\uff9c\073\uff9c" +
    "\074\uff9c\076\uff9c\077\uff9c\103\074\105\uff9c\110\uff9c\112" +
    "\110\113\062\114\uff9c\115\105\122\113\127\100\001\002" +
    "\000\116\002\uffc9\005\uffc9\007\uffc9\020\124\021\111\022" +
    "\077\023\125\026\070\034\101\035\122\036\063\037\121" +
    "\045\106\046\120\047\107\050\116\051\075\055\076\056" +
    "\117\057\123\060\066\064\uffc9\065\uffc9\066\073\067\115" +
    "\073\103\074\uffc9\076\uffc9\077\uffc9\103\074\105\uffc9\110" +
    "\uffc9\112\110\113\062\114\065\115\105\122\113\127\100" +
    "\001\002\000\110\004\uff85\006\uff85\010\uff85\011\uff85\013" +
    "\uff85\014\uff85\021\uff85\024\uff85\025\uff85\032\uff85\040\uff85" +
    "\041\uff85\042\uff85\043\uff85\044\uff85\052\uff85\053\uff85\054" +
    "\uff85\061\uff85\070\uff85\071\uff85\072\uff85\074\uff85\075\uff85" +
    "\077\uff85\100\uff85\106\uff85\107\uff85\111\uff85\116\uff85\117" +
    "\uff85\121\uff85\124\uff85\125\uff85\126\uff85\001\002\000\026" +
    "\004\200\010\175\011\173\012\176\013\202\014\177\017" +
    "\204\123\201\125\024\126\043\001\002\000\120\004\ufffb" +
    "\005\ufffb\006\ufffb\010\ufffb\011\ufffb\013\ufffb\014\ufffb\021" +
    "\ufffb\024\ufffb\025\ufffb\032\ufffb\040\ufffb\041\ufffb\042\ufffb" +
    "\043\ufffb\044\ufffb\052\ufffb\053\ufffb\054\ufffb\061\ufffb\066" +
    "\ufffb\070\ufffb\071\ufffb\072\ufffb\074\ufffb\075\ufffb\077\ufffb" +
    "\100\ufffb\101\ufffb\104\221\106\ufffb\107\ufffb\111\ufffb\116" +
    "\ufffb\117\ufffb\121\ufffb\124\ufffb\125\ufffb\126\ufffb\001\002" +
    "\000\116\004\ufff1\005\ufff1\006\ufff1\010\ufff1\011\ufff1\013" +
    "\ufff1\014\ufff1\021\ufff1\024\ufff1\025\ufff1\032\ufff1\040\ufff1" +
    "\041\ufff1\042\ufff1\043\ufff1\044\ufff1\052\ufff1\053\ufff1\054" +
    "\ufff1\061\ufff1\066\ufff1\070\ufff1\071\ufff1\072\ufff1\074\ufff1" +
    "\075\ufff1\077\ufff1\100\ufff1\101\ufff1\106\ufff1\107\ufff1\111" +
    "\ufff1\116\ufff1\117\ufff1\121\ufff1\124\ufff1\125\ufff1\126\ufff1" +
    "\001\002\000\116\004\ufffc\005\ufffc\006\ufffc\010\ufffc\011" +
    "\ufffc\013\ufffc\014\ufffc\021\ufffc\024\ufffc\025\ufffc\032\ufffc" +
    "\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\052\ufffc\053" +
    "\ufffc\054\ufffc\061\ufffc\066\ufffc\070\ufffc\071\ufffc\072\ufffc" +
    "\074\ufffc\075\ufffc\077\ufffc\100\ufffc\101\ufffc\106\ufffc\107" +
    "\ufffc\111\ufffc\116\ufffc\117\ufffc\121\ufffc\124\ufffc\125\ufffc" +
    "\126\ufffc\001\002\000\120\004\ufffa\005\ufffa\006\ufffa\010" +
    "\ufffa\011\ufffa\013\ufffa\014\ufffa\021\ufffa\024\ufffa\025\ufffa" +
    "\032\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\052" +
    "\ufffa\053\ufffa\054\ufffa\061\ufffa\066\ufffa\070\ufffa\071\ufffa" +
    "\072\ufffa\074\ufffa\075\ufffa\077\ufffa\100\ufffa\101\ufffa\104" +
    "\217\106\ufffa\107\ufffa\111\ufffa\116\ufffa\117\ufffa\121\ufffa" +
    "\124\ufffa\125\ufffa\126\ufffa\001\002\000\004\004\214\001" +
    "\002\000\026\004\200\010\175\011\173\012\176\013\202" +
    "\014\177\017\204\123\201\125\024\126\043\001\002\000" +
    "\116\004\ufff2\005\ufff2\006\ufff2\010\ufff2\011\ufff2\013\ufff2" +
    "\014\ufff2\021\ufff2\024\ufff2\025\ufff2\032\ufff2\040\ufff2\041" +
    "\ufff2\042\ufff2\043\ufff2\044\ufff2\052\ufff2\053\ufff2\054\ufff2" +
    "\061\ufff2\066\ufff2\070\ufff2\071\ufff2\072\ufff2\074\ufff2\075" +
    "\ufff2\077\ufff2\100\ufff2\101\ufff2\106\ufff2\107\ufff2\111\ufff2" +
    "\116\ufff2\117\ufff2\121\ufff2\124\ufff2\125\ufff2\126\ufff2\001" +
    "\002\000\004\004\207\001\002\000\114\004\ufffe\006\ufffe" +
    "\010\ufffe\011\ufffe\013\ufffe\014\ufffe\021\ufffe\024\ufffe\025" +
    "\ufffe\032\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe" +
    "\052\ufffe\053\ufffe\054\ufffe\061\ufffe\066\205\070\ufffe\071" +
    "\ufffe\072\ufffe\074\ufffe\075\ufffe\077\ufffe\100\ufffe\101\ufffe" +
    "\106\ufffe\107\ufffe\111\ufffe\116\ufffe\117\ufffe\121\ufffe\124" +
    "\ufffe\125\ufffe\126\ufffe\001\002\000\116\004\ufff7\005\ufff7" +
    "\006\ufff7\010\ufff7\011\ufff7\013\ufff7\014\ufff7\021\ufff7\024" +
    "\ufff7\025\ufff7\032\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7" +
    "\044\ufff7\052\ufff7\053\ufff7\054\ufff7\061\ufff7\066\ufff7\070" +
    "\ufff7\071\ufff7\072\ufff7\074\ufff7\075\ufff7\077\ufff7\100\ufff7" +
    "\101\ufff7\106\ufff7\107\ufff7\111\ufff7\116\ufff7\117\ufff7\121" +
    "\ufff7\124\ufff7\125\ufff7\126\ufff7\001\002\000\026\004\200" +
    "\010\175\011\173\012\176\013\202\014\177\017\204\123" +
    "\201\125\024\126\043\001\002\000\116\004\ufff4\005\ufff4" +
    "\006\ufff4\010\ufff4\011\ufff4\013\ufff4\014\ufff4\021\ufff4\024" +
    "\ufff4\025\ufff4\032\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4" +
    "\044\ufff4\052\ufff4\053\ufff4\054\ufff4\061\ufff4\066\ufff4\070" +
    "\ufff4\071\ufff4\072\ufff4\074\ufff4\075\ufff4\077\ufff4\100\ufff4" +
    "\101\ufff4\106\ufff4\107\ufff4\111\ufff4\116\ufff4\117\ufff4\121" +
    "\ufff4\124\ufff4\125\ufff4\126\ufff4\001\002\000\026\004\200" +
    "\010\175\011\173\012\176\013\202\014\177\017\204\123" +
    "\201\125\024\126\043\001\002\000\006\005\211\066\205" +
    "\001\002\000\116\004\ufff6\005\ufff6\006\ufff6\010\ufff6\011" +
    "\ufff6\013\ufff6\014\ufff6\021\ufff6\024\ufff6\025\ufff6\032\ufff6" +
    "\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\052\ufff6\053" +
    "\ufff6\054\ufff6\061\ufff6\066\ufff6\070\ufff6\071\ufff6\072\ufff6" +
    "\074\ufff6\075\ufff6\077\ufff6\100\ufff6\101\ufff6\106\ufff6\107" +
    "\ufff6\111\ufff6\116\ufff6\117\ufff6\121\ufff6\124\ufff6\125\ufff6" +
    "\126\ufff6\001\002\000\006\005\213\066\205\001\002\000" +
    "\116\004\ufff3\005\ufff3\006\ufff3\010\ufff3\011\ufff3\013\ufff3" +
    "\014\ufff3\021\ufff3\024\ufff3\025\ufff3\032\ufff3\040\ufff3\041" +
    "\ufff3\042\ufff3\043\ufff3\044\ufff3\052\ufff3\053\ufff3\054\ufff3" +
    "\061\ufff3\066\ufff3\070\ufff3\071\ufff3\072\ufff3\074\ufff3\075" +
    "\ufff3\077\ufff3\100\ufff3\101\ufff3\106\ufff3\107\ufff3\111\ufff3" +
    "\116\ufff3\117\ufff3\121\ufff3\124\ufff3\125\ufff3\126\ufff3\001" +
    "\002\000\026\004\200\010\175\011\173\012\176\013\202" +
    "\014\177\017\204\123\201\125\024\126\043\001\002\000" +
    "\006\005\216\066\205\001\002\000\116\004\ufff5\005\ufff5" +
    "\006\ufff5\010\ufff5\011\ufff5\013\ufff5\014\ufff5\021\ufff5\024" +
    "\ufff5\025\ufff5\032\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5" +
    "\044\ufff5\052\ufff5\053\ufff5\054\ufff5\061\ufff5\066\ufff5\070" +
    "\ufff5\071\ufff5\072\ufff5\074\ufff5\075\ufff5\077\ufff5\100\ufff5" +
    "\101\ufff5\106\ufff5\107\ufff5\111\ufff5\116\ufff5\117\ufff5\121" +
    "\ufff5\124\ufff5\125\ufff5\126\ufff5\001\002\000\006\125\024" +
    "\126\043\001\002\000\116\004\ufff8\005\ufff8\006\ufff8\010" +
    "\ufff8\011\ufff8\013\ufff8\014\ufff8\021\ufff8\024\ufff8\025\ufff8" +
    "\032\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\052" +
    "\ufff8\053\ufff8\054\ufff8\061\ufff8\066\ufff8\070\ufff8\071\ufff8" +
    "\072\ufff8\074\ufff8\075\ufff8\077\ufff8\100\ufff8\101\ufff8\106" +
    "\ufff8\107\ufff8\111\ufff8\116\ufff8\117\ufff8\121\ufff8\124\ufff8" +
    "\125\ufff8\126\ufff8\001\002\000\006\125\024\126\043\001" +
    "\002\000\116\004\ufff9\005\ufff9\006\ufff9\010\ufff9\011\ufff9" +
    "\013\ufff9\014\ufff9\021\ufff9\024\ufff9\025\ufff9\032\ufff9\040" +
    "\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\052\ufff9\053\ufff9" +
    "\054\ufff9\061\ufff9\066\ufff9\070\ufff9\071\ufff9\072\ufff9\074" +
    "\ufff9\075\ufff9\077\ufff9\100\ufff9\101\ufff9\106\ufff9\107\ufff9" +
    "\111\ufff9\116\ufff9\117\ufff9\121\ufff9\124\ufff9\125\ufff9\126" +
    "\ufff9\001\002\000\102\004\042\006\025\010\020\011\013" +
    "\013\005\014\046\021\033\024\052\025\016\032\012\040" +
    "\037\041\006\042\015\043\040\044\036\052\017\053\022" +
    "\054\045\061\051\070\011\071\010\072\027\075\041\100" +
    "\007\106\023\107\050\111\044\116\035\121\032\124\031" +
    "\125\024\126\043\001\002\000\116\005\225\020\124\021" +
    "\111\022\077\023\125\026\070\027\064\030\061\031\114" +
    "\033\072\034\101\035\122\036\063\037\121\045\106\046" +
    "\120\047\107\050\116\051\075\055\076\056\117\057\123" +
    "\060\066\062\112\063\102\064\067\065\104\066\073\067" +
    "\115\073\103\103\074\105\071\112\110\113\062\114\065" +
    "\115\105\122\113\127\100\001\002\000\132\002\uffaa\005" +
    "\uffaa\007\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\026\uffaa" +
    "\027\uffaa\030\uffaa\031\uffaa\033\uffaa\034\uffaa\035\uffaa\036" +
    "\uffaa\037\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa" +
    "\055\uffaa\056\uffaa\057\uffaa\060\uffaa\062\uffaa\063\uffaa\064" +
    "\uffaa\065\uffaa\066\uffaa\067\uffaa\073\uffaa\074\uffaa\076\uffaa" +
    "\077\uffaa\103\uffaa\105\uffaa\110\uffaa\112\uffaa\113\uffaa\114" +
    "\uffaa\115\uffaa\122\uffaa\127\uffaa\001\002\000\102\004\042" +
    "\006\025\010\020\011\013\013\005\014\046\021\033\024" +
    "\052\025\016\032\012\040\037\041\006\042\015\043\040" +
    "\044\036\052\017\053\022\054\045\061\051\070\011\071" +
    "\010\072\027\075\041\100\007\106\023\107\050\111\044" +
    "\116\035\121\032\124\031\125\024\126\043\001\002\000" +
    "\116\005\230\020\124\021\111\022\077\023\125\026\070" +
    "\027\064\030\061\031\114\033\072\034\101\035\122\036" +
    "\063\037\121\045\106\046\120\047\107\050\116\051\075" +
    "\055\076\056\117\057\123\060\066\062\112\063\102\064" +
    "\067\065\104\066\073\067\115\073\103\103\074\105\071" +
    "\112\110\113\062\114\065\115\105\122\113\127\100\001" +
    "\002\000\132\002\uffb4\005\uffb4\007\uffb4\020\uffb4\021\uffb4" +
    "\022\uffb4\023\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\033" +
    "\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\045\uffb4\046\uffb4" +
    "\047\uffb4\050\uffb4\051\uffb4\055\uffb4\056\uffb4\057\uffb4\060" +
    "\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4" +
    "\073\uffb4\074\uffb4\076\uffb4\077\uffb4\103\uffb4\105\uffb4\110" +
    "\uffb4\112\uffb4\113\uffb4\114\uffb4\115\uffb4\122\uffb4\127\uffb4" +
    "\001\002\000\104\004\042\006\025\010\020\011\013\013" +
    "\005\014\046\021\033\024\052\025\016\032\012\040\037" +
    "\041\006\042\015\043\040\044\036\052\017\053\022\054" +
    "\045\061\051\070\011\071\010\072\027\074\057\075\041" +
    "\100\007\106\023\107\050\111\044\116\035\121\032\124" +
    "\031\125\024\126\043\001\002\000\132\002\uff9f\005\uff9f" +
    "\007\uff9f\020\124\021\111\022\077\023\125\026\070\027" +
    "\064\030\061\031\114\033\072\034\101\035\122\036\063" +
    "\037\121\045\106\046\120\047\107\050\116\051\075\055" +
    "\076\056\117\057\123\060\066\062\112\063\102\064\067" +
    "\065\104\066\073\067\115\073\103\074\uff9f\076\uff9f\077" +
    "\uff9f\103\074\105\071\110\uff9f\112\110\113\062\114\065" +
    "\115\105\122\113\127\100\001\002\000\116\005\234\020" +
    "\124\021\111\022\077\023\125\026\070\027\064\030\061" +
    "\031\114\033\072\034\101\035\122\036\063\037\121\045" +
    "\106\046\120\047\107\050\116\051\075\055\076\056\117" +
    "\057\123\060\066\062\112\063\102\064\067\065\104\066" +
    "\073\067\115\073\103\103\074\105\071\112\110\113\062" +
    "\114\065\115\105\122\113\127\100\001\002\000\136\002" +
    "\uffa4\004\uff8a\005\uffa4\006\uff8a\007\uffa4\020\uffa4\021\uffa4" +
    "\022\uffa4\023\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\033" +
    "\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\045\uffa4\046\uffa4" +
    "\047\uffa4\050\uffa4\051\uffa4\055\uffa4\056\uffa4\057\uffa4\060" +
    "\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4" +
    "\073\uffa4\074\uffa4\076\uffa4\077\uffa4\103\uffa4\105\uffa4\110" +
    "\uffa4\112\uffa4\113\uffa4\114\uffa4\115\uffa4\122\uffa4\127\uffa4" +
    "\001\002\000\122\020\124\021\111\022\077\023\125\026" +
    "\070\027\064\030\061\031\114\033\072\034\101\035\122" +
    "\036\063\037\121\045\106\046\120\047\107\050\116\051" +
    "\075\055\076\056\117\057\123\060\066\062\112\063\102" +
    "\064\067\065\104\066\073\067\115\073\103\074\uffd9\076" +
    "\uffd9\103\074\105\071\110\242\112\110\113\062\114\065" +
    "\115\105\122\113\127\100\001\002\000\006\074\240\076" +
    "\237\001\002\000\132\002\uffa3\005\uffa3\007\uffa3\020\uffa3" +
    "\021\uffa3\022\uffa3\023\uffa3\026\uffa3\027\uffa3\030\uffa3\031" +
    "\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\045\uffa3" +
    "\046\uffa3\047\uffa3\050\uffa3\051\uffa3\055\uffa3\056\uffa3\057" +
    "\uffa3\060\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3" +
    "\067\uffa3\073\uffa3\074\uffa3\076\uffa3\077\uffa3\103\uffa3\105" +
    "\uffa3\110\uffa3\112\uffa3\113\uffa3\114\uffa3\115\uffa3\122\uffa3" +
    "\127\uffa3\001\002\000\102\004\042\006\025\010\020\011" +
    "\013\013\005\014\046\021\033\024\052\025\016\032\012" +
    "\040\037\041\006\042\015\043\040\044\036\052\017\053" +
    "\022\054\045\061\051\070\011\071\010\072\027\075\041" +
    "\100\007\106\023\107\050\111\044\116\035\121\032\124" +
    "\031\125\024\126\043\001\002\000\124\005\uffda\007\uffda" +
    "\020\124\021\111\022\077\023\125\026\070\027\064\030" +
    "\061\031\114\033\072\034\101\035\122\036\063\037\121" +
    "\045\106\046\120\047\107\050\116\051\075\055\076\056" +
    "\117\057\123\060\066\062\112\063\102\064\067\065\104" +
    "\066\073\067\115\073\103\074\uffda\076\uffda\103\074\105" +
    "\071\112\110\113\062\114\065\115\105\122\113\127\100" +
    "\001\002\000\004\125\053\001\002\000\006\074\057\077" +
    "\244\001\002\000\102\004\042\006\025\010\020\011\013" +
    "\013\005\014\046\021\033\024\052\025\016\032\012\040" +
    "\037\041\006\042\015\043\040\044\036\052\017\053\022" +
    "\054\045\061\051\070\011\071\010\072\027\075\041\100" +
    "\007\106\023\107\050\111\044\116\035\121\032\124\031" +
    "\125\024\126\043\001\002\000\116\020\124\021\111\022" +
    "\077\023\125\026\070\027\064\030\061\031\114\033\072" +
    "\034\101\035\122\036\063\037\121\045\106\046\120\047" +
    "\107\050\116\051\075\055\076\056\117\057\123\060\066" +
    "\062\112\063\102\064\067\065\104\066\073\067\115\073" +
    "\103\076\246\103\074\105\071\112\110\113\062\114\065" +
    "\115\105\122\113\127\100\001\002\000\132\002\uffa2\005" +
    "\uffa2\007\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\026\uffa2" +
    "\027\uffa2\030\uffa2\031\uffa2\033\uffa2\034\uffa2\035\uffa2\036" +
    "\uffa2\037\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2" +
    "\055\uffa2\056\uffa2\057\uffa2\060\uffa2\062\uffa2\063\uffa2\064" +
    "\uffa2\065\uffa2\066\uffa2\067\uffa2\073\uffa2\074\uffa2\076\uffa2" +
    "\077\uffa2\103\uffa2\105\uffa2\110\uffa2\112\uffa2\113\uffa2\114" +
    "\uffa2\115\uffa2\122\uffa2\127\uffa2\001\002\000\102\004\042" +
    "\006\025\010\020\011\013\013\005\014\046\021\033\024" +
    "\052\025\016\032\012\040\037\041\006\042\015\043\040" +
    "\044\036\052\017\053\022\054\045\061\051\070\011\071" +
    "\010\072\027\075\041\100\007\106\023\107\050\111\044" +
    "\116\035\121\032\124\031\125\024\126\043\001\002\000" +
    "\116\005\251\020\124\021\111\022\077\023\125\026\070" +
    "\027\064\030\061\031\114\033\072\034\101\035\122\036" +
    "\063\037\121\045\106\046\120\047\107\050\116\051\075" +
    "\055\076\056\117\057\123\060\066\062\112\063\102\064" +
    "\067\065\104\066\073\067\115\073\103\103\074\105\071" +
    "\112\110\113\062\114\065\115\105\122\113\127\100\001" +
    "\002\000\132\002\uffaf\005\uffaf\007\uffaf\020\uffaf\021\uffaf" +
    "\022\uffaf\023\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\033" +
    "\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\045\uffaf\046\uffaf" +
    "\047\uffaf\050\uffaf\051\uffaf\055\uffaf\056\uffaf\057\uffaf\060" +
    "\uffaf\062\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf" +
    "\073\uffaf\074\uffaf\076\uffaf\077\uffaf\103\uffaf\105\uffaf\110" +
    "\uffaf\112\uffaf\113\uffaf\114\uffaf\115\uffaf\122\uffaf\127\uffaf" +
    "\001\002\000\102\004\042\006\025\010\020\011\013\013" +
    "\005\014\046\021\033\024\052\025\016\032\012\040\037" +
    "\041\006\042\015\043\040\044\036\052\017\053\022\054" +
    "\045\061\051\070\011\071\010\072\027\075\041\100\007" +
    "\106\023\107\050\111\044\116\035\121\032\124\031\125" +
    "\024\126\043\001\002\000\116\005\254\020\124\021\111" +
    "\022\077\023\125\026\070\027\064\030\061\031\114\033" +
    "\072\034\101\035\122\036\063\037\121\045\106\046\120" +
    "\047\107\050\116\051\075\055\076\056\117\057\123\060" +
    "\066\062\112\063\102\064\067\065\104\066\073\067\115" +
    "\073\103\103\074\105\071\112\110\113\062\114\065\115" +
    "\105\122\113\127\100\001\002\000\132\002\uffb3\005\uffb3" +
    "\007\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\037\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\055" +
    "\uffb3\056\uffb3\057\uffb3\060\uffb3\062\uffb3\063\uffb3\064\uffb3" +
    "\065\uffb3\066\uffb3\067\uffb3\073\uffb3\074\uffb3\076\uffb3\077" +
    "\uffb3\103\uffb3\105\uffb3\110\uffb3\112\uffb3\113\uffb3\114\uffb3" +
    "\115\uffb3\122\uffb3\127\uffb3\001\002\000\102\004\042\006" +
    "\025\010\020\011\013\013\005\014\046\021\033\024\052" +
    "\025\016\032\012\040\037\041\006\042\015\043\040\044" +
    "\036\052\017\053\022\054\045\061\051\070\011\071\010" +
    "\072\027\075\041\100\007\106\023\107\050\111\044\116" +
    "\035\121\032\124\031\125\024\126\043\001\002\000\116" +
    "\005\257\020\124\021\111\022\077\023\125\026\070\027" +
    "\064\030\061\031\114\033\072\034\101\035\122\036\063" +
    "\037\121\045\106\046\120\047\107\050\116\051\075\055" +
    "\076\056\117\057\123\060\066\062\112\063\102\064\067" +
    "\065\104\066\073\067\115\073\103\103\074\105\071\112" +
    "\110\113\062\114\065\115\105\122\113\127\100\001\002" +
    "\000\132\002\uffb1\005\uffb1\007\uffb1\020\uffb1\021\uffb1\022" +
    "\uffb1\023\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\033\uffb1" +
    "\034\uffb1\035\uffb1\036\uffb1\037\uffb1\045\uffb1\046\uffb1\047" +
    "\uffb1\050\uffb1\051\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1" +
    "\062\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1\073" +
    "\uffb1\074\uffb1\076\uffb1\077\uffb1\103\uffb1\105\uffb1\110\uffb1" +
    "\112\uffb1\113\uffb1\114\uffb1\115\uffb1\122\uffb1\127\uffb1\001" +
    "\002\000\102\004\042\006\025\010\020\011\013\013\005" +
    "\014\046\021\033\024\052\025\016\032\012\040\037\041" +
    "\006\042\015\043\040\044\036\052\017\053\022\054\045" +
    "\061\051\070\011\071\010\072\027\075\041\100\007\106" +
    "\023\107\050\111\044\116\035\121\032\124\031\125\024" +
    "\126\043\001\002\000\116\005\262\020\124\021\111\022" +
    "\077\023\125\026\070\027\064\030\061\031\114\033\072" +
    "\034\101\035\122\036\063\037\121\045\106\046\120\047" +
    "\107\050\116\051\075\055\076\056\117\057\123\060\066" +
    "\062\112\063\102\064\067\065\104\066\073\067\115\073" +
    "\103\103\074\105\071\112\110\113\062\114\065\115\105" +
    "\122\113\127\100\001\002\000\132\002\uffab\005\uffab\007" +
    "\uffab\020\uffab\021\uffab\022\uffab\023\uffab\026\uffab\027\uffab" +
    "\030\uffab\031\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037" +
    "\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\055\uffab" +
    "\056\uffab\057\uffab\060\uffab\062\uffab\063\uffab\064\uffab\065" +
    "\uffab\066\uffab\067\uffab\073\uffab\074\uffab\076\uffab\077\uffab" +
    "\103\uffab\105\uffab\110\uffab\112\uffab\113\uffab\114\uffab\115" +
    "\uffab\122\uffab\127\uffab\001\002\000\006\125\024\126\043" +
    "\001\002\000\144\002\uffa8\004\265\005\uffa8\007\uffa8\020" +
    "\uffa8\021\uffa8\022\uffa8\023\uffa8\026\uffa8\027\uffa8\030\uffa8" +
    "\031\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\045" +
    "\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\055\uffa8\056\uffa8" +
    "\057\uffa8\060\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8\066" +
    "\uffa8\067\uffa8\073\uffa8\074\uffa8\076\uffa8\077\uffa8\103\uffa8" +
    "\105\uffa8\110\uffa8\112\uffa8\113\uffa8\114\uffa8\115\uffa8\121" +
    "\032\122\uffa8\124\031\125\024\126\043\127\uffa8\001\002" +
    "\000\026\004\200\010\175\011\173\012\176\013\202\014" +
    "\177\017\204\123\201\125\024\126\043\001\002\000\132" +
    "\002\uffa6\005\uffa6\007\uffa6\020\uffa6\021\uffa6\022\uffa6\023" +
    "\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\033\uffa6\034\uffa6" +
    "\035\uffa6\036\uffa6\037\uffa6\045\uffa6\046\uffa6\047\uffa6\050" +
    "\uffa6\051\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\062\uffa6" +
    "\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\073\uffa6\074" +
    "\uffa6\076\uffa6\077\uffa6\103\uffa6\105\uffa6\110\uffa6\112\uffa6" +
    "\113\uffa6\114\uffa6\115\uffa6\122\uffa6\127\uffa6\001\002\000" +
    "\132\002\uffa7\005\uffa7\007\uffa7\020\uffa7\021\uffa7\022\uffa7" +
    "\023\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\033\uffa7\034" +
    "\uffa7\035\uffa7\036\uffa7\037\uffa7\045\uffa7\046\uffa7\047\uffa7" +
    "\050\uffa7\051\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\062" +
    "\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\073\uffa7" +
    "\074\uffa7\076\uffa7\077\uffa7\103\uffa7\105\uffa7\110\uffa7\112" +
    "\uffa7\113\uffa7\114\uffa7\115\uffa7\122\uffa7\127\uffa7\001\002" +
    "\000\012\005\uff86\066\205\125\024\126\043\001\002\000" +
    "\004\005\273\001\002\000\004\005\uff87\001\002\000\132" +
    "\002\uffa5\005\uffa5\007\uffa5\020\uffa5\021\uffa5\022\uffa5\023" +
    "\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\033\uffa5\034\uffa5" +
    "\035\uffa5\036\uffa5\037\uffa5\045\uffa5\046\uffa5\047\uffa5\050" +
    "\uffa5\051\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\062\uffa5" +
    "\063\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5\073\uffa5\074" +
    "\uffa5\076\uffa5\077\uffa5\103\uffa5\105\uffa5\110\uffa5\112\uffa5" +
    "\113\uffa5\114\uffa5\115\uffa5\122\uffa5\127\uffa5\001\002\000" +
    "\006\004\uff8c\006\uff8c\001\002\000\132\002\uffb9\005\uffb9" +
    "\007\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\026\uffb9\027" +
    "\uffb9\030\uffb9\031\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9" +
    "\037\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\055" +
    "\uffb9\056\uffb9\057\uffb9\060\uffb9\062\uffb9\063\uffb9\064\uffb9" +
    "\065\uffb9\066\uffb9\067\uffb9\073\uffb9\074\uffb9\076\uffb9\077" +
    "\uffb9\103\uffb9\105\uffb9\110\uffb9\112\uffb9\113\uffb9\114\uffb9" +
    "\115\uffb9\122\uffb9\127\100\001\002\000\102\004\042\006" +
    "\025\010\020\011\013\013\005\014\046\021\033\024\052" +
    "\025\016\032\012\040\037\041\006\042\015\043\040\044" +
    "\036\052\017\053\022\054\045\061\051\070\011\071\010" +
    "\072\027\075\041\100\007\106\023\107\050\111\044\116" +
    "\035\121\032\124\031\125\024\126\043\001\002\000\116" +
    "\005\300\020\124\021\111\022\077\023\125\026\070\027" +
    "\064\030\061\031\114\033\072\034\101\035\122\036\063" +
    "\037\121\045\106\046\120\047\107\050\116\051\075\055" +
    "\076\056\117\057\123\060\066\062\112\063\102\064\067" +
    "\065\104\066\073\067\115\073\103\103\074\105\071\112" +
    "\110\113\062\114\065\115\105\122\113\127\100\001\002" +
    "\000\132\002\uffac\005\uffac\007\uffac\020\uffac\021\uffac\022" +
    "\uffac\023\uffac\026\uffac\027\uffac\030\uffac\031\uffac\033\uffac" +
    "\034\uffac\035\uffac\036\uffac\037\uffac\045\uffac\046\uffac\047" +
    "\uffac\050\uffac\051\uffac\055\uffac\056\uffac\057\uffac\060\uffac" +
    "\062\uffac\063\uffac\064\uffac\065\uffac\066\uffac\067\uffac\073" +
    "\uffac\074\uffac\076\uffac\077\uffac\103\uffac\105\uffac\110\uffac" +
    "\112\uffac\113\uffac\114\uffac\115\uffac\122\uffac\127\uffac\001" +
    "\002\000\122\005\uffd9\007\uffd9\020\124\021\111\022\077" +
    "\023\125\026\070\027\064\030\061\031\114\033\072\034" +
    "\101\035\122\036\063\037\121\045\106\046\120\047\107" +
    "\050\116\051\075\055\076\056\117\057\123\060\066\062" +
    "\112\063\102\064\067\065\104\066\073\067\115\073\103" +
    "\074\uffd9\103\074\105\071\112\110\113\062\114\065\115" +
    "\105\122\113\127\100\001\002\000\006\007\303\074\240" +
    "\001\002\000\132\002\uff9a\005\uff9a\007\uff9a\020\uff9a\021" +
    "\uff9a\022\uff9a\023\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a" +
    "\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\045\uff9a\046" +
    "\uff9a\047\uff9a\050\uff9a\051\uff9a\055\uff9a\056\uff9a\057\uff9a" +
    "\060\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a\067" +
    "\uff9a\073\uff9a\074\uff9a\076\uff9a\077\uff9a\103\uff9a\105\uff9a" +
    "\110\uff9a\112\uff9a\113\uff9a\114\uff9a\115\uff9a\122\uff9a\127" +
    "\uff9a\001\002\000\104\004\042\006\025\010\020\011\013" +
    "\013\005\014\046\021\033\024\052\025\016\032\012\040" +
    "\037\041\006\042\015\043\040\044\036\052\017\053\022" +
    "\054\045\061\051\070\011\071\010\072\027\074\057\075" +
    "\041\100\007\106\023\107\050\111\044\116\035\121\032" +
    "\124\031\125\024\126\043\001\002\000\132\002\uffa1\005" +
    "\uffa1\007\uffa1\020\124\021\111\022\077\023\125\026\070" +
    "\027\064\030\061\031\114\033\072\034\101\035\122\036" +
    "\063\037\121\045\106\046\120\047\107\050\116\051\075" +
    "\055\076\056\117\057\123\060\066\062\112\063\102\064" +
    "\067\065\104\066\073\067\115\073\103\074\uffa1\076\uffa1" +
    "\077\uffa1\103\074\105\071\110\uffa1\112\110\113\062\114" +
    "\065\115\105\122\113\127\100\001\002\000\102\004\042" +
    "\006\025\010\020\011\013\013\005\014\046\021\033\024" +
    "\052\025\016\032\012\040\037\041\006\042\015\043\040" +
    "\044\036\052\017\053\022\054\045\061\051\070\011\071" +
    "\010\072\027\075\041\100\007\106\023\107\050\111\044" +
    "\116\035\121\032\124\031\125\024\126\043\001\002\000" +
    "\116\005\310\020\124\021\111\022\077\023\125\026\070" +
    "\027\064\030\061\031\114\033\072\034\101\035\122\036" +
    "\063\037\121\045\106\046\120\047\107\050\116\051\075" +
    "\055\076\056\117\057\123\060\066\062\112\063\102\064" +
    "\067\065\104\066\073\067\115\073\103\103\074\105\071" +
    "\112\110\113\062\114\065\115\105\122\113\127\100\001" +
    "\002\000\132\002\uffb5\005\uffb5\007\uffb5\020\uffb5\021\uffb5" +
    "\022\uffb5\023\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\033" +
    "\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\045\uffb5\046\uffb5" +
    "\047\uffb5\050\uffb5\051\uffb5\055\uffb5\056\uffb5\057\uffb5\060" +
    "\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5" +
    "\073\uffb5\074\uffb5\076\uffb5\077\uffb5\103\uffb5\105\uffb5\110" +
    "\uffb5\112\uffb5\113\uffb5\114\uffb5\115\uffb5\122\uffb5\127\uffb5" +
    "\001\002\000\010\006\365\073\172\101\ufffd\001\002\000" +
    "\006\077\363\110\362\001\002\000\102\004\042\006\025" +
    "\010\020\011\013\013\005\014\046\021\033\024\052\025" +
    "\016\032\012\040\037\041\006\042\015\043\040\044\036" +
    "\052\017\053\022\054\045\061\051\070\011\071\010\072" +
    "\027\075\041\100\007\106\023\107\050\111\044\116\035" +
    "\121\032\124\031\125\024\126\043\001\002\000\024\002" +
    "\uffec\003\uffec\006\uffec\015\uffec\016\uffec\075\uffec\076\uffec" +
    "\125\uffec\126\uffec\001\002\000\004\004\351\001\002\000" +
    "\020\002\uffff\003\322\006\313\015\315\075\317\125\320" +
    "\126\043\001\002\000\016\003\322\006\313\015\315\075" +
    "\317\125\320\126\043\001\002\000\014\006\uff84\073\uff84" +
    "\074\ufffd\101\uff84\117\ufffd\001\002\000\022\002\uffee\003" +
    "\uffee\006\uffee\015\uffee\075\uffee\076\uffee\125\uffee\126\uffee" +
    "\001\002\000\024\002\uffe7\003\uffe7\006\uffe7\015\uffe7\016" +
    "\uffe7\075\uffe7\076\uffe7\125\uffe7\126\uffe7\001\002\000\024" +
    "\002\uffed\003\uffed\006\uffed\015\uffed\016\uffed\075\uffed\076" +
    "\uffed\125\uffed\126\uffed\001\002\000\024\002\uffeb\003\uffeb" +
    "\006\uffeb\015\uffeb\016\uffeb\075\uffeb\076\uffeb\125\uffeb\126" +
    "\uffeb\001\002\000\006\074\057\117\344\001\002\000\024" +
    "\002\uffe8\003\uffe8\006\uffe8\015\uffe8\016\uffe8\075\uffe8\076" +
    "\uffe8\125\uffe8\126\uffe8\001\002\000\006\077\331\110\330" +
    "\001\002\000\006\125\320\126\043\001\002\000\024\002" +
    "\uffe9\003\uffe9\006\uffe9\015\uffe9\016\uffe9\075\uffe9\076\uffe9" +
    "\125\uffe9\126\uffe9\001\002\000\006\077\uffe6\110\uffe6\001" +
    "\002\000\010\006\335\073\172\101\ufffd\001\002\000\004" +
    "\101\342\001\002\000\102\004\042\006\025\010\020\011" +
    "\013\013\005\014\046\021\033\024\052\025\016\032\012" +
    "\040\037\041\006\042\015\043\040\044\036\052\017\053" +
    "\022\054\045\061\051\070\011\071\010\072\027\075\041" +
    "\100\007\106\023\107\050\111\044\116\035\121\032\124" +
    "\031\125\024\126\043\001\002\000\116\007\337\020\124" +
    "\021\111\022\077\023\125\026\070\027\064\030\061\031" +
    "\114\033\072\034\101\035\122\036\063\037\121\045\106" +
    "\046\120\047\107\050\116\051\075\055\076\056\117\057" +
    "\123\060\066\062\112\063\102\064\067\065\104\066\073" +
    "\067\115\073\103\103\074\105\071\112\110\113\062\114" +
    "\065\115\105\122\113\127\100\001\002\000\004\101\340" +
    "\001\002\000\102\004\042\006\025\010\020\011\013\013" +
    "\005\014\046\021\033\024\052\025\016\032\012\040\037" +
    "\041\006\042\015\043\040\044\036\052\017\053\022\054" +
    "\045\061\051\070\011\071\010\072\027\075\041\100\007" +
    "\106\023\107\050\111\044\116\035\121\032\124\031\125" +
    "\024\126\043\001\002\000\120\020\124\021\111\022\077" +
    "\023\125\026\070\027\064\030\061\031\114\033\072\034" +
    "\101\035\122\036\063\037\121\045\106\046\120\047\107" +
    "\050\116\051\075\055\076\056\117\057\123\060\066\062" +
    "\112\063\102\064\067\065\104\066\073\067\115\073\103" +
    "\077\uffe2\103\074\105\071\110\uffe2\112\110\113\062\114" +
    "\065\115\105\122\113\127\100\001\002\000\102\004\042" +
    "\006\025\010\020\011\013\013\005\014\046\021\033\024" +
    "\052\025\016\032\012\040\037\041\006\042\015\043\040" +
    "\044\036\052\017\053\022\054\045\061\051\070\011\071" +
    "\010\072\027\075\041\100\007\106\023\107\050\111\044" +
    "\116\035\121\032\124\031\125\024\126\043\001\002\000" +
    "\120\020\124\021\111\022\077\023\125\026\070\027\064" +
    "\030\061\031\114\033\072\034\101\035\122\036\063\037" +
    "\121\045\106\046\120\047\107\050\116\051\075\055\076" +
    "\056\117\057\123\060\066\062\112\063\102\064\067\065" +
    "\104\066\073\067\115\073\103\077\uffe4\103\074\105\071" +
    "\110\uffe4\112\110\113\062\114\065\115\105\122\113\127" +
    "\100\001\002\000\102\004\042\006\025\010\020\011\013" +
    "\013\005\014\046\021\033\024\052\025\016\032\012\040" +
    "\037\041\006\042\015\043\040\044\036\052\017\053\022" +
    "\054\045\061\051\070\011\071\010\072\027\075\041\100" +
    "\007\106\023\107\050\111\044\116\035\121\032\124\031" +
    "\125\024\126\043\001\002\000\120\020\124\021\111\022" +
    "\077\023\125\026\070\027\064\030\061\031\114\033\072" +
    "\034\101\035\122\036\063\037\121\045\106\046\120\047" +
    "\107\050\116\051\075\055\076\056\117\057\123\060\066" +
    "\062\112\063\102\064\067\065\104\066\073\067\115\073" +
    "\103\077\uffe3\103\074\105\071\110\uffe3\112\110\113\062" +
    "\114\065\115\105\122\113\127\100\001\002\000\020\003" +
    "\322\006\313\015\315\075\317\076\347\125\320\126\043" +
    "\001\002\000\024\002\ufff0\003\ufff0\006\ufff0\015\ufff0\016" +
    "\ufff0\075\ufff0\076\ufff0\125\ufff0\126\ufff0\001\002\000\022" +
    "\002\uffef\003\uffef\006\uffef\015\uffef\075\uffef\076\uffef\125" +
    "\uffef\126\uffef\001\002\000\102\004\042\006\025\010\020" +
    "\011\013\013\005\014\046\021\033\024\052\025\016\032" +
    "\012\040\037\041\006\042\015\043\040\044\036\052\017" +
    "\053\022\054\045\061\051\070\011\071\010\072\027\075" +
    "\041\100\007\106\023\107\050\111\044\116\035\121\032" +
    "\124\031\125\024\126\043\001\002\000\116\005\353\020" +
    "\124\021\111\022\077\023\125\026\070\027\064\030\061" +
    "\031\114\033\072\034\101\035\122\036\063\037\121\045" +
    "\106\046\120\047\107\050\116\051\075\055\076\056\117" +
    "\057\123\060\066\062\112\063\102\064\067\065\104\066" +
    "\073\067\115\073\103\103\074\105\071\112\110\113\062" +
    "\114\065\115\105\122\113\127\100\001\002\000\016\003" +
    "\322\006\313\015\315\075\317\125\320\126\043\001\002" +
    "\000\024\002\uffdf\003\uffdf\006\uffdf\015\uffdf\016\355\075" +
    "\uffdf\076\uffdf\125\uffdf\126\uffdf\001\002\000\016\003\322" +
    "\006\313\015\315\075\317\125\320\126\043\001\002\000" +
    "\024\002\uffe1\003\uffe1\006\uffe1\015\uffe1\016\uffe1\075\uffe1" +
    "\076\uffe1\125\uffe1\126\uffe1\001\002\000\024\002\uffe0\003" +
    "\uffe0\006\uffe0\015\uffe0\016\uffe0\075\uffe0\076\uffe0\125\uffe0" +
    "\126\uffe0\001\002\000\116\007\361\020\124\021\111\022" +
    "\077\023\125\026\070\027\064\030\061\031\114\033\072" +
    "\034\101\035\122\036\063\037\121\045\106\046\120\047" +
    "\107\050\116\051\075\055\076\056\117\057\123\060\066" +
    "\062\112\063\102\064\067\065\104\066\073\067\115\073" +
    "\103\103\074\105\071\112\110\113\062\114\065\115\105" +
    "\122\113\127\100\001\002\000\024\002\uffde\003\uffde\006" +
    "\uffde\015\uffde\016\uffde\075\uffde\076\uffde\125\uffde\126\uffde" +
    "\001\002\000\006\125\320\126\043\001\002\000\024\002" +
    "\uffea\003\uffea\006\uffea\015\uffea\016\uffea\075\uffea\076\uffea" +
    "\125\uffea\126\uffea\001\002\000\006\077\uffe5\110\uffe5\001" +
    "\002\000\102\004\042\006\025\010\020\011\013\013\005" +
    "\014\046\021\033\024\052\025\016\032\012\040\037\041" +
    "\006\042\015\043\040\044\036\052\017\053\022\054\045" +
    "\061\051\070\011\071\010\072\027\075\041\100\007\106" +
    "\023\107\050\111\044\116\035\121\032\124\031\125\024" +
    "\126\043\001\002\000\116\007\367\020\124\021\111\022" +
    "\077\023\125\026\070\027\064\030\061\031\114\033\072" +
    "\034\101\035\122\036\063\037\121\045\106\046\120\047" +
    "\107\050\116\051\075\055\076\056\117\057\123\060\066" +
    "\062\112\063\102\064\067\065\104\066\073\067\115\073" +
    "\103\103\074\105\071\112\110\113\062\114\065\115\105" +
    "\122\113\127\100\001\002\000\026\002\uffdd\003\uffdd\006" +
    "\uffdd\015\uffdd\016\uffdd\075\uffdd\076\uffdd\101\340\125\uffdd" +
    "\126\uffdd\001\002\000\102\004\042\006\025\010\020\011" +
    "\013\013\005\014\046\021\033\024\052\025\016\032\012" +
    "\040\037\041\006\042\015\043\040\044\036\052\017\053" +
    "\022\054\045\061\051\070\011\071\010\072\027\075\041" +
    "\100\007\106\023\107\050\111\044\116\035\121\032\124" +
    "\031\125\024\126\043\001\002\000\116\005\372\020\124" +
    "\021\111\022\077\023\125\026\070\027\064\030\061\031" +
    "\114\033\072\034\101\035\122\036\063\037\121\045\106" +
    "\046\120\047\107\050\116\051\075\055\076\056\117\057" +
    "\123\060\066\062\112\063\102\064\067\065\104\066\073" +
    "\067\115\073\103\103\074\105\071\112\110\113\062\114" +
    "\065\115\105\122\113\127\100\001\002\000\132\002\uffb6" +
    "\005\uffb6\007\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\026" +
    "\uffb6\027\uffb6\030\uffb6\031\uffb6\033\uffb6\034\uffb6\035\uffb6" +
    "\036\uffb6\037\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051" +
    "\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\062\uffb6\063\uffb6" +
    "\064\uffb6\065\uffb6\066\uffb6\067\uffb6\073\uffb6\074\uffb6\076" +
    "\uffb6\077\uffb6\103\uffb6\105\uffb6\110\uffb6\112\uffb6\113\uffb6" +
    "\114\uffb6\115\uffb6\122\uffb6\127\uffb6\001\002\000\102\004" +
    "\042\006\025\010\020\011\013\013\005\014\046\021\033" +
    "\024\052\025\016\032\012\040\037\041\006\042\015\043" +
    "\040\044\036\052\017\053\022\054\045\061\051\070\011" +
    "\071\010\072\027\075\041\100\007\106\023\107\050\111" +
    "\044\116\035\121\032\124\031\125\024\126\043\001\002" +
    "\000\116\005\375\020\124\021\111\022\077\023\125\026" +
    "\070\027\064\030\061\031\114\033\072\034\101\035\122" +
    "\036\063\037\121\045\106\046\120\047\107\050\116\051" +
    "\075\055\076\056\117\057\123\060\066\062\112\063\102" +
    "\064\067\065\104\066\073\067\115\073\103\103\074\105" +
    "\071\112\110\113\062\114\065\115\105\122\113\127\100" +
    "\001\002\000\132\002\uffb0\005\uffb0\007\uffb0\020\uffb0\021" +
    "\uffb0\022\uffb0\023\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0" +
    "\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\045\uffb0\046" +
    "\uffb0\047\uffb0\050\uffb0\051\uffb0\055\uffb0\056\uffb0\057\uffb0" +
    "\060\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0\066\uffb0\067" +
    "\uffb0\073\uffb0\074\uffb0\076\uffb0\077\uffb0\103\uffb0\105\uffb0" +
    "\110\uffb0\112\uffb0\113\uffb0\114\uffb0\115\uffb0\122\uffb0\127" +
    "\uffb0\001\002\000\004\002\000\001\002\000\132\002\uffb8" +
    "\005\uffb8\007\uffb8\020\124\021\111\022\077\023\125\026" +
    "\070\027\064\030\061\031\114\033\072\034\101\035\122" +
    "\036\063\037\121\045\106\046\120\047\107\050\116\051" +
    "\075\055\076\056\117\057\123\060\066\062\112\063\102" +
    "\064\uffb8\065\uffb8\066\073\067\115\073\103\074\uffb8\076" +
    "\uffb8\077\uffb8\103\074\105\uffb8\110\uffb8\112\110\113\062" +
    "\114\065\115\105\122\113\127\100\001\002\000\102\004" +
    "\042\006\025\010\020\011\013\013\005\014\046\021\033" +
    "\024\052\025\016\032\012\040\037\041\006\042\015\043" +
    "\040\044\036\052\017\053\022\054\045\061\051\070\011" +
    "\071\010\072\027\075\041\100\007\106\023\107\050\111" +
    "\044\116\035\121\032\124\031\125\024\126\043\001\002" +
    "\000\116\005\u0102\020\124\021\111\022\077\023\125\026" +
    "\070\027\064\030\061\031\114\033\072\034\101\035\122" +
    "\036\063\037\121\045\106\046\120\047\107\050\116\051" +
    "\075\055\076\056\117\057\123\060\066\062\112\063\102" +
    "\064\067\065\104\066\073\067\115\073\103\103\074\105" +
    "\071\112\110\113\062\114\065\115\105\122\113\127\100" +
    "\001\002\000\132\002\uffae\005\uffae\007\uffae\020\uffae\021" +
    "\uffae\022\uffae\023\uffae\026\uffae\027\uffae\030\uffae\031\uffae" +
    "\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\045\uffae\046" +
    "\uffae\047\uffae\050\uffae\051\uffae\055\uffae\056\uffae\057\uffae" +
    "\060\uffae\062\uffae\063\uffae\064\uffae\065\uffae\066\uffae\067" +
    "\uffae\073\uffae\074\uffae\076\uffae\077\uffae\103\uffae\105\uffae" +
    "\110\uffae\112\uffae\113\uffae\114\uffae\115\uffae\122\uffae\127" +
    "\uffae\001\002\000\102\004\042\006\025\010\020\011\013" +
    "\013\005\014\046\021\033\024\052\025\016\032\012\040" +
    "\037\041\006\042\015\043\040\044\036\052\017\053\022" +
    "\054\045\061\051\070\011\071\010\072\027\075\041\100" +
    "\007\106\023\107\050\111\044\116\035\121\032\124\031" +
    "\125\024\126\043\001\002\000\116\005\u0105\020\124\021" +
    "\111\022\077\023\125\026\070\027\064\030\061\031\114" +
    "\033\072\034\101\035\122\036\063\037\121\045\106\046" +
    "\120\047\107\050\116\051\075\055\076\056\117\057\123" +
    "\060\066\062\112\063\102\064\067\065\104\066\073\067" +
    "\115\073\103\103\074\105\071\112\110\113\062\114\065" +
    "\115\105\122\113\127\100\001\002\000\132\002\uffad\005" +
    "\uffad\007\uffad\020\uffad\021\uffad\022\uffad\023\uffad\026\uffad" +
    "\027\uffad\030\uffad\031\uffad\033\uffad\034\uffad\035\uffad\036" +
    "\uffad\037\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad" +
    "\055\uffad\056\uffad\057\uffad\060\uffad\062\uffad\063\uffad\064" +
    "\uffad\065\uffad\066\uffad\067\uffad\073\uffad\074\uffad\076\uffad" +
    "\077\uffad\103\uffad\105\uffad\110\uffad\112\uffad\113\uffad\114" +
    "\uffad\115\uffad\122\uffad\127\uffad\001\002\000\102\004\042" +
    "\006\025\010\020\011\013\013\005\014\046\021\033\024" +
    "\052\025\016\032\012\040\037\041\006\042\015\043\040" +
    "\044\036\052\017\053\022\054\045\061\051\070\011\071" +
    "\010\072\027\075\041\100\007\106\023\107\050\111\044" +
    "\116\035\121\032\124\031\125\024\126\043\001\002\000" +
    "\116\005\u0108\020\124\021\111\022\077\023\125\026\070" +
    "\027\064\030\061\031\114\033\072\034\101\035\122\036" +
    "\063\037\121\045\106\046\120\047\107\050\116\051\075" +
    "\055\076\056\117\057\123\060\066\062\112\063\102\064" +
    "\067\065\104\066\073\067\115\073\103\103\074\105\071" +
    "\112\110\113\062\114\065\115\105\122\113\127\100\001" +
    "\002\000\132\002\uffb2\005\uffb2\007\uffb2\020\uffb2\021\uffb2" +
    "\022\uffb2\023\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\033" +
    "\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\045\uffb2\046\uffb2" +
    "\047\uffb2\050\uffb2\051\uffb2\055\uffb2\056\uffb2\057\uffb2\060" +
    "\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2" +
    "\073\uffb2\074\uffb2\076\uffb2\077\uffb2\103\uffb2\105\uffb2\110" +
    "\uffb2\112\uffb2\113\uffb2\114\uffb2\115\uffb2\122\uffb2\127\uffb2" +
    "\001\002\000\102\004\042\006\025\010\020\011\013\013" +
    "\005\014\046\021\033\024\052\025\016\032\012\040\037" +
    "\041\006\042\015\043\040\044\036\052\017\053\022\054" +
    "\045\061\051\070\011\071\010\072\027\075\041\100\007" +
    "\106\023\107\050\111\044\116\035\121\032\124\031\125" +
    "\024\126\043\001\002\000\116\005\u010b\020\124\021\111" +
    "\022\077\023\125\026\070\027\064\030\061\031\114\033" +
    "\072\034\101\035\122\036\063\037\121\045\106\046\120" +
    "\047\107\050\116\051\075\055\076\056\117\057\123\060" +
    "\066\062\112\063\102\064\067\065\104\066\073\067\115" +
    "\073\103\103\074\105\071\112\110\113\062\114\065\115" +
    "\105\122\113\127\100\001\002\000\132\002\uffa9\005\uffa9" +
    "\007\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\026\uffa9\027" +
    "\uffa9\030\uffa9\031\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9" +
    "\037\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\055" +
    "\uffa9\056\uffa9\057\uffa9\060\uffa9\062\uffa9\063\uffa9\064\uffa9" +
    "\065\uffa9\066\uffa9\067\uffa9\073\uffa9\074\uffa9\076\uffa9\077" +
    "\uffa9\103\uffa9\105\uffa9\110\uffa9\112\uffa9\113\uffa9\114\uffa9" +
    "\115\uffa9\122\uffa9\127\uffa9\001\002\000\104\004\042\005" +
    "\uffdb\006\025\010\020\011\013\013\005\014\046\021\033" +
    "\024\052\025\016\032\012\040\037\041\006\042\015\043" +
    "\040\044\036\052\017\053\022\054\045\061\051\070\011" +
    "\071\010\072\027\075\041\100\007\106\023\107\050\111" +
    "\044\116\035\121\032\124\031\125\024\126\043\001\002" +
    "\000\102\004\042\006\025\010\020\011\013\013\005\014" +
    "\046\021\033\024\052\025\016\032\012\040\037\041\006" +
    "\042\015\043\040\044\036\052\017\053\022\054\045\061" +
    "\051\070\011\071\010\072\027\075\041\100\007\106\023" +
    "\107\050\111\044\116\035\121\032\124\031\125\024\126" +
    "\043\001\002\000\116\007\u010f\020\124\021\111\022\077" +
    "\023\125\026\070\027\064\030\061\031\114\033\072\034" +
    "\101\035\122\036\063\037\121\045\106\046\120\047\107" +
    "\050\116\051\075\055\076\056\117\057\123\060\066\062" +
    "\112\063\102\064\067\065\104\066\073\067\115\073\103" +
    "\103\074\105\071\112\110\113\062\114\065\115\105\122" +
    "\113\127\100\001\002\000\132\002\uff8e\005\uff8e\007\uff8e" +
    "\020\uff8e\021\uff8e\022\uff8e\023\uff8e\026\uff8e\027\uff8e\030" +
    "\uff8e\031\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e" +
    "\045\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e\055\uff8e\056" +
    "\uff8e\057\uff8e\060\uff8e\062\uff8e\063\uff8e\064\uff8e\065\uff8e" +
    "\066\uff8e\067\uff8e\073\uff8e\074\uff8e\076\uff8e\077\uff8e\103" +
    "\uff8e\105\uff8e\110\uff8e\112\uff8e\113\uff8e\114\uff8e\115\uff8e" +
    "\122\uff8e\127\uff8e\001\002\000\004\005\u0112\001\002\000" +
    "\006\005\uffdc\074\240\001\002\000\132\002\uff8f\005\uff8f" +
    "\007\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\026\uff8f\027" +
    "\uff8f\030\uff8f\031\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f" +
    "\037\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\055" +
    "\uff8f\056\uff8f\057\uff8f\060\uff8f\062\uff8f\063\uff8f\064\uff8f" +
    "\065\uff8f\066\uff8f\067\uff8f\073\uff8f\074\uff8f\076\uff8f\077" +
    "\uff8f\103\uff8f\105\uff8f\110\uff8f\112\uff8f\113\uff8f\114\uff8f" +
    "\115\uff8f\122\uff8f\127\uff8f\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\016\011\025\013\033\014\046\016\027\017" +
    "\003\020\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\011\376\013\033\014\046\016\027" +
    "\017\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\315\004\322\005\323\006\311\013" +
    "\310\015\313\021\325\022\053\023\324\024\326\025\320" +
    "\001\001\000\002\001\001\000\006\022\053\023\303\001" +
    "\001\000\002\001\001\000\016\010\301\011\300\013\033" +
    "\014\046\016\027\017\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\011\274\013\033\014\046\016\027\017" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\010" +
    "\235\011\234\013\033\014\046\016\027\017\003\001\001" +
    "\000\014\011\232\013\033\014\046\016\027\017\003\001" +
    "\001\000\002\001\001\000\006\022\053\023\230\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\053\023\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\170\001\001\000\002\001\001\000" +
    "\014\011\055\013\033\014\046\016\027\017\003\001\001" +
    "\000\002\001\001\000\004\022\057\001\001\000\002\001" +
    "\001\000\014\011\167\013\033\014\046\016\027\017\003" +
    "\001\001\000\014\011\166\013\033\014\046\016\027\017" +
    "\003\001\001\000\014\011\165\013\033\014\046\016\027" +
    "\017\003\001\001\000\014\011\164\013\033\014\046\016" +
    "\027\017\003\001\001\000\014\011\163\013\033\014\046" +
    "\016\027\017\003\001\001\000\014\011\162\013\033\014" +
    "\046\016\027\017\003\001\001\000\014\011\161\013\033" +
    "\014\046\016\027\017\003\001\001\000\014\011\160\013" +
    "\033\014\046\016\027\017\003\001\001\000\014\011\157" +
    "\013\033\014\046\016\027\017\003\001\001\000\014\011" +
    "\156\013\033\014\046\016\027\017\003\001\001\000\014" +
    "\011\155\013\033\014\046\016\027\017\003\001\001\000" +
    "\014\011\154\013\033\014\046\016\027\017\003\001\001" +
    "\000\014\011\153\013\033\014\046\016\027\017\003\001" +
    "\001\000\014\011\152\013\033\014\046\016\027\017\003" +
    "\001\001\000\014\011\151\013\033\014\046\016\027\017" +
    "\003\001\001\000\002\001\001\000\014\011\150\013\033" +
    "\014\046\016\027\017\003\001\001\000\014\011\147\013" +
    "\033\014\046\016\027\017\003\001\001\000\014\011\146" +
    "\013\033\014\046\016\027\017\003\001\001\000\014\011" +
    "\145\013\033\014\046\016\027\017\003\001\001\000\014" +
    "\011\144\013\033\014\046\016\027\017\003\001\001\000" +
    "\014\011\143\013\033\014\046\016\027\017\003\001\001" +
    "\000\014\011\142\013\033\014\046\016\027\017\003\001" +
    "\001\000\014\011\141\013\033\014\046\016\027\017\003" +
    "\001\001\000\014\011\140\013\033\014\046\016\027\017" +
    "\003\001\001\000\014\011\137\013\033\014\046\016\027" +
    "\017\003\001\001\000\014\011\136\013\033\014\046\016" +
    "\027\017\003\001\001\000\014\011\135\013\033\014\046" +
    "\016\027\017\003\001\001\000\014\011\134\013\033\014" +
    "\046\016\027\017\003\001\001\000\002\001\001\000\014" +
    "\011\133\013\033\014\046\016\027\017\003\001\001\000" +
    "\014\011\132\013\033\014\046\016\027\017\003\001\001" +
    "\000\014\011\131\013\033\014\046\016\027\017\003\001" +
    "\001\000\014\011\130\013\033\014\046\016\027\017\003" +
    "\001\001\000\014\011\127\013\033\014\046\016\027\017" +
    "\003\001\001\000\014\011\126\013\033\014\046\016\027" +
    "\017\003\001\001\000\014\011\125\013\033\014\046\016" +
    "\027\017\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\202\013\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\211\013" +
    "\173\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\205\013\173\001" +
    "\001\000\002\001\001\000\006\002\207\013\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\214\013\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\217\001\001\000" +
    "\002\001\001\000\004\013\221\001\001\000\002\001\001" +
    "\000\014\011\223\013\033\014\046\016\027\017\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\011\226" +
    "\013\033\014\046\016\027\017\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\011\231\013\033\014\046" +
    "\016\027\017\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\011\240\013\033\014\046\016" +
    "\027\017\003\001\001\000\002\001\001\000\006\022\053" +
    "\023\242\001\001\000\002\001\001\000\014\011\244\013" +
    "\033\014\046\016\027\017\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\011\247\013\033\014\046\016" +
    "\027\017\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\011\252\013\033\014\046\016\027\017\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\011\255" +
    "\013\033\014\046\016\027\017\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\011\260\013\033\014\046" +
    "\016\027\017\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\273\001\001\000\006\013\266\014\265" +
    "\001\001\000\006\002\267\013\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\271\027\270\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\011\276\013\033" +
    "\014\046\016\027\017\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\011\304\013\033\014\046\016\027\017" +
    "\003\001\001\000\002\001\001\000\014\011\306\013\033" +
    "\014\046\016\027\017\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\333\001\001\000\002\001\001" +
    "\000\014\011\357\013\033\014\046\016\027\017\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\322" +
    "\005\323\006\311\013\310\015\313\021\325\022\053\023" +
    "\324\024\326\025\347\001\001\000\030\003\345\004\322" +
    "\005\323\006\311\013\310\015\313\021\325\022\053\023" +
    "\324\024\326\025\320\001\001\000\004\026\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\331\013\332\022\053\023\324\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\333" +
    "\001\001\000\002\001\001\000\014\011\335\013\033\014" +
    "\046\016\027\017\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\011\340\013\033\014\046\016\027\017" +
    "\003\001\001\000\002\001\001\000\014\011\342\013\033" +
    "\014\046\016\027\017\003\001\001\000\002\001\001\000" +
    "\014\011\344\013\033\014\046\016\027\017\003\001\001" +
    "\000\002\001\001\000\026\004\322\005\323\006\311\013" +
    "\310\015\313\021\325\022\053\023\324\024\326\025\347" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\011" +
    "\351\013\033\014\046\016\027\017\003\001\001\000\002" +
    "\001\001\000\026\004\322\005\323\006\311\013\310\015" +
    "\313\021\325\022\053\023\324\024\326\025\353\001\001" +
    "\000\004\007\355\001\001\000\026\004\322\005\323\006" +
    "\311\013\310\015\313\021\325\022\053\023\324\024\326" +
    "\025\356\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\363\013\332" +
    "\022\053\023\324\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\011\365\013\033\014\046\016\027\017\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\011" +
    "\370\013\033\014\046\016\027\017\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\011\373\013\033\014" +
    "\046\016\027\017\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\011" +
    "\u0100\013\033\014\046\016\027\017\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\011\u0103\013\033\014" +
    "\046\016\027\017\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\011\u0106\013\033\014\046\016\027\017" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\011\u0109\013\033\014\046\016\027\017\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\010\u0110\011\300" +
    "\012\u010f\013\033\014\046\016\027\017\003\001\001\000" +
    "\014\011\u010d\013\033\014\046\016\027\017\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	private Scanner scanner;

	public List<ErrInfo> errorInfo;

	public Parser(	java_cup.runtime.Scanner s, 
			ComplexSymbolFactory sf,
			List<ErrInfo> errorInfo) {
			    super(s,sf);
			    this.errorInfo = errorInfo;
			}


	public static syntree parse(String file) throws Exception
	{
		ExtComplexSymbolFactory sf = new ExtComplexSymbolFactory();
		Scanner scanner = new Scanner(new java.io.FileInputStream(file), sf);
		return (syntree) new Parser(scanner, sf).parse().value;
	}
	
	public static syntree parse(java.io.InputStream inputstream, List<ErrInfo> errorInfo) throws Exception
	{
		ExtComplexSymbolFactory sf = new ExtComplexSymbolFactory();
		Scanner scanner = new Scanner(inputstream,sf);
		java_cup.runtime.Symbol s = new Parser(scanner, sf, errorInfo).parse();
		if (s == null)
		    return null;
		else
		    return (syntree) s.value;
	}
	

	public void report_error(String message, Object info) {
	    ErrInfo einfo = new ErrInfo(0, 0, message);
	    errorInfo.add(einfo);
	    einfo.raw = info;

    	    if (info instanceof ComplexSymbolFactory.ComplexSymbol) {
		ComplexSymbolFactory.ComplexSymbol s = ((ComplexSymbolFactory.ComplexSymbol) info);
		einfo.symbol = s;
		if (s != null && s.getRight() != null && s.getLeft() != null) {
			ComplexSymbolFactory.Location loc_abs = s.getLeft();
			ComplexSymbolFactory.Location loc_line = s.getRight();
	       	    	einfo.start = loc_abs.getLine();    
	       	    	einfo.end = loc_abs.getColumn();    
	       	    	einfo.line = loc_line.getLine();    
	       	    	einfo.column = loc_line.getColumn();    
	        }
	    }
	} 

  public void report_fatal_error(String message, Object info) {
      report_error(message, info);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // number ::= REAL 
            {
              syntree RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.REAL, new synvalue(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // number ::= NUMBER 
            {
              syntree RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.NUMBER, new synvalue(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // id ::= STRING 
            {
              syntree RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.ID, new synvalue(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // id ::= ID 
            {
              syntree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.ID, new synvalue(i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // typed_id ::= ID m_type 
            {
              syntree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree t = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.TYPED_ID, new synvalue(i), t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typed_id",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // m_id ::= 
            {
              syntree RESULT =null;
		 RESULT = new syntree(alphabet.ID, new synvalue("")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("m_id",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // m_id ::= id 
            {
              syntree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree i = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("m_id",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // typed_id_list ::= typed_id 
            {
              syntree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree i = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.TYPED_ID_LIST, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typed_id_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // typed_id_list ::= typed_id_list OP_COMMA typed_id 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l.add(r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typed_id_list",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // fexpression ::= LPAR expression RPAR 
            {
              syntree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree e = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fexpression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // fexpression ::= expression OP_CONVERSE 
            {
              syntree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree e = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_CONVERSE, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fexpression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // fexpression ::= id OP_DOT id 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_DOT, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fexpression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // fexpression ::= id 
            {
              syntree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree i = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fexpression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // img_app_expression ::= fexpression LSQB expression RSQB 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new syntree(alphabet.IMAGE, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("img_app_expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // img_app_expression ::= fexpression LPAR m_expression_list RPAR 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new syntree(alphabet.FAPP, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("img_app_expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expression ::= expression XTAG 
            {
              syntree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree e = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.XTAG, new synvalue(t), e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expression ::= img_app_expression 
            {
              syntree RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expression ::= number 
            {
              syntree RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree n = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expression ::= id 
            {
              syntree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree i = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expression ::= BOOL 
            {
              syntree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_BOOL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expression ::= INT 
            {
              syntree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_INT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expression ::= OP_FALSE 
            {
              syntree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_FALSE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expression ::= OP_TRUE 
            {
              syntree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_TRUE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expression ::= OP_EMPTYSEQ 
            {
              syntree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_EMPTYSEQ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expression ::= OP_EMPTYSET 
            {
              syntree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_EMPTYSET); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expression ::= LSQB expression_list RSQB 
            {
              syntree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree ee = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new syntree(alphabet.SEQC, ee); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expression ::= expression CART expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_CART, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expression ::= expression OP_REL expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_REL, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expression ::= expression OP_PINJ expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_PINJ, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expression ::= expression OP_PFUN expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_PFUN, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expression ::= B_LAMBDA typed_id_list expression 
            {
              syntree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree ii = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree e = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.B_LAMBDA, ii, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expression ::= B_EXISTS typed_id_list expression 
            {
              syntree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree ii = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree e = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.B_EXISTS, ii, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expression ::= B_FORALL typed_id_list expression 
            {
              syntree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree ii = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree e = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.B_FORALL, ii, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expression ::= LCUR expression VLINE typed_id_list SEMIC expression RCUR 
            {
              syntree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		syntree x = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		syntree ii = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree y = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.B_SETCOMP, ii, x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expression ::= LCUR expression_list RCUR 
            {
              syntree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree ee = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.SETC, ee); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expression ::= LPAR expression RPAR 
            {
              syntree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree e = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expression ::= id OP_PRIME LPAR type m_id RPAR 
            {
              syntree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		syntree i = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree t = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree z = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new syntree(alphabet.ID_TEMPL_TYPE, i, t, z); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expression ::= id OP_PRIME number 
            {
              syntree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree i = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree z = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_QUAL, i, z); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression ::= id OP_PRIME id 
            {
              syntree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree i = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree z = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_QUAL, i, z); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression ::= id OP_PRIME 
            {
              syntree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree i = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new syntree(alphabet.OP_PRIME, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression ::= SEQ LPAR expression RPAR 
            {
              syntree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree t = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new syntree(alphabet.OP_SEQ, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression ::= SET LPAR expression RPAR 
            {
              syntree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree t = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new syntree(alphabet.OP_SET, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression ::= OP_FINITE LPAR expression RPAR 
            {
              syntree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree t = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new syntree(alphabet.OP_FINITE, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression ::= OP_SOME LPAR expression RPAR 
            {
              syntree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new syntree(alphabet.OP_SOME, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= OP_PRJ2 LPAR expression RPAR 
            {
              syntree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new syntree(alphabet.OP_PRJ2, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= OP_PRJ1 LPAR expression RPAR 
            {
              syntree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new syntree(alphabet.OP_PRJ1, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= OP_MAX LPAR expression RPAR 
            {
              syntree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new syntree(alphabet.OP_MAX, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= OP_MIN LPAR expression RPAR 
            {
              syntree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new syntree(alphabet.OP_MIN, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= OP_SUM LPAR expression RPAR 
            {
              syntree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new syntree(alphabet.OP_SUM, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= OP_GEN_INTER LPAR expression RPAR 
            {
              syntree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new syntree(alphabet.OP_GEN_INTER, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= OP_GEN_UNION LPAR expression RPAR 
            {
              syntree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new syntree(alphabet.OP_GEN_UNION, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= OP_CARD LPAR expression RPAR 
            {
              syntree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new syntree(alphabet.OP_CARD, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= OP_DOM LPAR expression RPAR 
            {
              syntree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new syntree(alphabet.OP_DOM, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= OP_RAN LPAR expression RPAR 
            {
              syntree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new syntree(alphabet.OP_RAN, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= expression OP_CONVERSE 
            {
              syntree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree e = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_CONVERSE, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= OP_NOT expression 
            {
              syntree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree e = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_NOT, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= OP_MINUS expression 
            {
              syntree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree e = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_UNARY_MINUS, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= expression OP_SUBSETEQ expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_SUBSETEQ, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= expression OP_SUBSET expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_SUBSET, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= expression OP_DOT expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_DOT, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= expression OP_RANGE expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_RANGE, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= expression OP_DIRECT_PRODUCT expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_DIRECT_PRODUCT, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= expression OP_FCOMP expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_FCOMP, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= expression OP_MAP expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_MAP, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= expression OP_NOTIN expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_NOTIN, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= expression OP_IN expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_IN, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= expression OP_RANSUB expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_RANSUB, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= expression OP_RANRES expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_RANRES, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= expression OP_DOMSUB expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_DOMSUB, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= expression OP_DOMRES expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_DOMRES, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= expression OP_MOD expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_MOD, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= expression OP_GEQ expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_GEQ, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= expression OP_GRT expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_GRT, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= expression OP_LEQ expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_LEQ, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= expression OP_LSS expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_LSS, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= expression OP_NEQ expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_NEQ, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= expression OP_EQL expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_EQL, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= expression OP_IMPLIES expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.OP_IMPLIES, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= expression OP_SETMINUS expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = syntree.multipack(alphabet.OP_SETMINUS, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= expression OP_OVR expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = syntree.multipack(alphabet.OP_OVR, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= expression OP_INTER expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = syntree.multipack(alphabet.OP_INTER, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= expression OP_UNION expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = syntree.multipack(alphabet.OP_UNION, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= expression OP_DIV expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = syntree.multipack(alphabet.OP_DIV, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= expression OP_MUL expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = syntree.multipack(alphabet.OP_MUL, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= expression OP_MINUS expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = syntree.multipack(alphabet.OP_MINUS, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= expression OP_PLUS expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = syntree.multipack(alphabet.OP_PLUS, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= expression OP_OR expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = syntree.multipack(alphabet.OP_OR, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= expression OP_AND expression 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = syntree.multipack(alphabet.OP_AND, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression_list ::= expression 
            {
              syntree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree e = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.EXP_LIST, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression_list ::= expression_list OP_COMMA expression 
            {
              syntree RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree ee = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree e = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ee.add(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // m_expression_list ::= 
            {
              syntree RESULT =null;
		 RESULT = new syntree(alphabet.EXP_LIST); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("m_expression_list",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // m_expression_list ::= expression_list 
            {
              syntree RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree ee = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ee; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("m_expression_list",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // assertion ::= id LSQB expression RSQB 
            {
              syntree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		syntree b = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree e = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.ASSERTION, b, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assertion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // assertion ::= LSQB expression RSQB 
            {
              syntree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree e = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object z = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.ASSERTION, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assertion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // m_else ::= 
            {
              syntree RESULT =null;
		 RESULT = new syntree(alphabet.SKIP); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("m_else",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // m_else ::= ELSE c_statement 
            {
              syntree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree ss = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ss; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("m_else",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // if_statement ::= IF LPAR expression RPAR c_statement m_else 
            {
              syntree RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		syntree c = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree ss = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree e = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.IF, c, ss, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // assignment ::= id LSQB expression RSQB BCMEQ expression 
            {
              syntree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		syntree i = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		syntree z = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree e = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.BCMEQ_SEQ, i, z, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // assignment ::= typed_id_list BCMSUCH expression 
            {
              syntree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree i = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree e = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.BCMSUCH, i, e, new syntree(alphabet.SKIP)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // assignment ::= id m_type BCMEQ expression 
            {
              syntree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		syntree i = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree t = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree e = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.BCMEQ, i, t, e, new syntree(alphabet.SKIP)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // par_assignment ::= assignment VLINE assignment 
            {
              syntree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree a = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree b = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.PAR_ASSIGN, a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_assignment",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // par_assignment ::= par_assignment VLINE assignment 
            {
              syntree RESULT =null;
		int vvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree vv = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree a = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vv.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("par_assignment",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= error 
            {
              syntree RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= assertion 
            {
              syntree RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree v = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= par_assignment SEMIC 
            {
              syntree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree a = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= assignment SEMIC 
            {
              syntree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree a = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= if_statement 
            {
              syntree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree i = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // c_statement ::= block 
            {
              syntree RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree c = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // c_statement ::= statement 
            {
              syntree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree s = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("c_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statements ::= c_statement 
            {
              syntree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree s = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.STM_LIST, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statements ::= statements c_statement 
            {
              syntree RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree ss = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree s = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ss.add(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // block ::= LCUR statements RCUR 
            {
              syntree RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree ss = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new syntree(alphabet.BLOCK, ss); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= id 
            {
              syntree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree i = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= QUESTION 
            {
              syntree RESULT =null;
		 RESULT = new syntree(alphabet.TYPE_NULL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= LPAR type RPAR 
            {
              syntree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree t = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= type CART type 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.CART, l, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= SET LPAR type RPAR 
            {
              syntree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree t = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new syntree(alphabet.SET, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= SEQ LPAR type RPAR 
            {
              syntree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree t = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new syntree(alphabet.SEQ, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= UNIT 
            {
              syntree RESULT =null;
		 RESULT = new syntree(alphabet.TYPE_UNIT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= TYPE_REAL OP_PRIME id 
            {
              syntree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree s = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.TYPE_REAL, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= INT OP_PRIME id 
            {
              syntree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree s = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(alphabet.INT, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= TYPE_REAL 
            {
              syntree RESULT =null;
		 RESULT = new syntree(alphabet.TYPE_REAL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= INT 
            {
              syntree RESULT =null;
		 RESULT = new syntree(alphabet.INT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type ::= BOOL 
            {
              syntree RESULT =null;
		 RESULT = new syntree(alphabet.BOOL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // m_type ::= 
            {
              syntree RESULT =null;
		 RESULT = new syntree(alphabet.TYPE_ANY); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("m_type",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // m_type ::= OP_IN type 
            {
              syntree RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree t = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("m_type",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // initialrule ::= MAGIC_SUB statements 
            {
              syntree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree s = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialrule",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= initialrule EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree start_val = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // initialrule ::= expression 
            {
              syntree RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree e = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initialrule",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

