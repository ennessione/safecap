
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 11 18:39:22 BST 2019
//----------------------------------------------------

package uk.ac.ncl.safecap.textentry.parser;

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jun 11 18:39:22 BST 2019
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\004\000\002\004\005\000\002\004\004" +
    "\000\002\005\003\000\002\005\004\000\002\006\004\000" +
    "\002\015\005\000\002\015\003\000\002\007\005\000\002" +
    "\007\004\000\002\010\003\000\002\010\005\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\014\006\000\002\014\002\000\002\012\006\000\002" +
    "\012\002\000\002\013\003\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\006\024\004\025\006\001\002\000\024\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\015\uffe7\017\uffe7\021\uffe7" +
    "\024\uffe7\025\uffe7\001\002\000\004\002\057\001\002\000" +
    "\024\006\uffe6\007\uffe6\010\uffe6\011\uffe6\015\uffe6\017\uffe6" +
    "\021\uffe6\024\uffe6\025\uffe6\001\002\000\006\024\004\025" +
    "\006\001\002\000\006\006\014\010\013\001\002\000\016" +
    "\002\uffe8\007\uffe8\020\052\021\uffe8\024\uffe8\025\uffe8\001" +
    "\002\000\014\002\000\007\000\021\000\024\000\025\000" +
    "\001\002\000\024\006\014\010\013\011\044\012\041\013" +
    "\040\022\036\023\042\024\004\025\006\001\002\000\010" +
    "\007\017\024\004\025\006\001\002\000\014\002\uffff\007" +
    "\uffff\021\uffff\024\uffff\025\uffff\001\002\000\012\007\ufff7" +
    "\021\ufff7\024\ufff7\025\ufff7\001\002\000\022\002\ufffc\007" +
    "\ufffc\011\ufffc\017\ufffc\020\ufffc\021\ufffc\024\ufffc\025\ufffc" +
    "\001\002\000\010\015\033\024\004\025\006\001\002\000" +
    "\010\007\ufffb\024\ufffb\025\ufffb\001\002\000\010\007\032" +
    "\024\004\025\006\001\002\000\012\007\uffea\021\025\024" +
    "\uffea\025\uffea\001\002\000\010\007\ufff9\024\ufff9\025\ufff9" +
    "\001\002\000\004\006\026\001\002\000\006\024\004\025" +
    "\006\001\002\000\010\007\030\024\004\025\006\001\002" +
    "\000\010\007\uffeb\024\uffeb\025\uffeb\001\002\000\010\007" +
    "\ufffa\024\ufffa\025\ufffa\001\002\000\022\002\ufffd\007\ufffd" +
    "\011\ufffd\017\ufffd\020\ufffd\021\ufffd\024\ufffd\025\ufffd\001" +
    "\002\000\022\006\014\010\013\012\041\013\040\022\036" +
    "\023\042\024\004\025\006\001\002\000\016\007\uffee\011" +
    "\uffee\017\uffee\021\uffee\024\uffee\025\uffee\001\002\000\016" +
    "\007\uffec\011\uffec\017\uffec\021\uffec\024\uffec\025\uffec\001" +
    "\002\000\016\007\ufff2\011\ufff2\017\ufff2\021\ufff2\024\ufff2" +
    "\025\ufff2\001\002\000\016\007\uffed\011\uffed\017\uffed\021" +
    "\uffed\024\uffed\025\uffed\001\002\000\016\007\uffef\011\uffef" +
    "\017\uffef\021\uffef\024\uffef\025\uffef\001\002\000\016\007" +
    "\ufff0\011\ufff0\017\ufff0\021\ufff0\024\ufff0\025\ufff0\001\002" +
    "\000\016\007\ufff1\011\ufff1\017\ufff1\021\ufff1\024\ufff1\025" +
    "\ufff1\001\002\000\012\007\ufff8\021\ufff8\024\ufff8\025\ufff8" +
    "\001\002\000\020\002\ufff5\007\ufff5\011\ufff5\017\ufff5\021" +
    "\ufff5\024\ufff5\025\ufff5\001\002\000\006\011\050\017\047" +
    "\001\002\000\006\011\ufff4\017\ufff4\001\002\000\022\006" +
    "\014\010\013\012\041\013\040\022\036\023\042\024\004" +
    "\025\006\001\002\000\020\002\ufff6\007\ufff6\011\ufff6\017" +
    "\ufff6\021\ufff6\024\ufff6\025\ufff6\001\002\000\006\011\ufff3" +
    "\017\ufff3\001\002\000\004\006\054\001\002\000\014\002" +
    "\ufffe\007\ufffe\021\ufffe\024\ufffe\025\ufffe\001\002\000\006" +
    "\024\004\025\006\001\002\000\010\007\056\024\004\025" +
    "\006\001\002\000\014\002\uffe9\007\uffe9\021\uffe9\024\uffe9" +
    "\025\uffe9\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\006\002\004\013\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\007" +
    "\001\001\000\010\003\011\004\010\007\014\001\001\000" +
    "\004\012\052\001\001\000\002\001\001\000\014\004\034" +
    "\007\036\010\044\011\045\013\033\001\001\000\014\002" +
    "\015\005\021\006\020\013\017\015\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\007\001\001\000\002\001\001\000\012\002\015\006\030" +
    "\013\017\015\022\001\001\000\004\014\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\002\015\005\026" +
    "\006\020\013\017\015\022\001\001\000\012\002\015\006" +
    "\030\013\017\015\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\034\007\036\011" +
    "\042\013\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\034\007\036\011\050\013\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\002\015\005\054\006\020\013\017\015\022\001\001" +
    "\000\012\002\015\006\030\013\017\015\022\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	private Scanner scanner;

	public TEContext context = new TEContext();

	public Parser(java_cup.runtime.Scanner s, 
			ComplexSymbolFactory sf,
			TEContext context) {
			    super(s,sf);
			    this.context = context;
			}

	
	public static syntree parse(java.io.InputStream inputstream, TEContext context) throws Exception
	{
		ExtComplexSymbolFactory sf = new ExtComplexSymbolFactory();
		Scanner scanner = new Scanner(inputstream, sf);
		java_cup.runtime.Symbol s = new Parser(scanner, sf, context).parse();
		if (s == null || !(s.value instanceof syntree))
		    return null;
		else {
		    return (syntree) s.value;
		}
	}
	

	public void report_error(String message, Object info) {
	    ErrInfo einfo = new ErrInfo(0, 0, message);
	    context.addError(einfo);
	    einfo.raw = info;

    	if (info instanceof ComplexSymbolFactory.ComplexSymbol) {
			ComplexSymbolFactory.ComplexSymbol s = ((ComplexSymbolFactory.ComplexSymbol) info);
			einfo.symbol = s;
			if (s != null && s.getRight() != null && s.getLeft() != null) {
				ComplexSymbolFactory.Location loc_abs = s.getLeft();
				ComplexSymbolFactory.Location loc_line = s.getRight();
	       	    einfo.start = loc_abs.getLine();    
	       	    einfo.end = loc_abs.getColumn();    
	       	    einfo.line = loc_line.getLine();    
	       	    einfo.column = loc_line.getColumn();    
	        }
	    }
	} 

  public void report_fatal_error(String message, Object info) {
      report_error(message, info);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // name ::= STRING 
            {
              syntree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(tesym.NAME, new synvalue(s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("name",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // name ::= ID 
            {
              syntree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(tesym.NAME, new synvalue(s)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("name",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // meta ::= 
            {
              syntree RESULT =null;
		 RESULT = new syntree(tesym.META); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("meta",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // meta ::= META LCUR record_list RCUR 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new syntree(tesym.META, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("meta",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // vmeta ::= 
            {
              syntree RESULT =null;
		 RESULT = new syntree(tesym.META); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vmeta",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // vmeta ::= RQT LCUR record_list RCUR 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new syntree(tesym.META, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vmeta",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // value ::= name_based 
            {
              syntree RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // value ::= array 
            {
              syntree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree a = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // value ::= name 
            {
              syntree RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree s = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // value ::= XFALSE 
            {
              syntree RESULT =null;
		 RESULT = new syntree(tesym.FALSE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // value ::= XTRUE 
            {
              syntree RESULT =null;
		 RESULT = new syntree(tesym.TRUE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // value ::= REAL 
            {
              syntree RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(tesym.REAL, new synvalue(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // value ::= NUMBER 
            {
              syntree RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(tesym.INTEGER, new synvalue(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // value_list ::= value_list COMMA value 
            {
              syntree RESULT =null;
		int vvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree vv = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree v = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = vv.add(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // value_list ::= value 
            {
              syntree RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree v = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(tesym.ARRAY, v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // array ::= LSQB RSQB 
            {
              syntree RESULT =null;
		 RESULT = new syntree(tesym.ARRAY); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // array ::= LSQB value_list RSQB 
            {
              syntree RESULT =null;
		int vvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree vv = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = vv; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // record_part0 ::= record 
            {
              syntree RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_part0",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // record_part0 ::= name COLON value 
            {
              syntree RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree n = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree v = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(tesym.ENTRY, n, v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_part0",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // record_part ::= record_part0 vmeta 
            {
              syntree RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree m = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = r.add(m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_part",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // record_list ::= record_list record_part 
            {
              syntree RESULT =null;
		int rrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree rr = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = rr.add(r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // record_list ::= record_part 
            {
              syntree RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree r = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(tesym.ENTRIES, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // name_based ::= LCUR RCUR 
            {
              syntree RESULT =null;
		 RESULT = new syntree(tesym.ENTRIES); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("name_based",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // name_based ::= LCUR record_list RCUR 
            {
              syntree RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree l = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("name_based",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // record_body ::= name_based meta 
            {
              syntree RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree x = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree m = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = x.add(m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_body",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // record_body ::= array 
            {
              syntree RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree a = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_body",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // record ::= name name record_body 
            {
              syntree RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		syntree i = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree n = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		syntree b = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new syntree(tesym.RECORD, i, n, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= record EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		syntree start_val = (syntree)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

